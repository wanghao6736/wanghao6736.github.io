<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Halo 动态博客搭建和代理配置</title>
    <link href="/2022/09/09/Website-Deployment/"/>
    <url>/2022/09/09/Website-Deployment/</url>
    
    <content type="html"><![CDATA[<p>使用阿里云服务器搭建动态博客，以及配置<code>Nginx</code>反向代理。</p><span id="more"></span><h1 id="动态博客搭建"><a href="#动态博客搭建" class="headerlink" title="动态博客搭建"></a>动态博客搭建</h1><p>之前搭建了静态的<a href="https://wanghao6736.github.io/2021/08/20/Hexo-Blog/">Hexo</a>博客，因为是部署在<code>Git Page</code>上，所以服务器端基本不用操心，整个博客搭建过程也比较顺利；后面就一直想试试在一台真正的服务器上搭建一个网站，今天也是终于把这个愿望给完成了。这次选的是<a href="https://halo.run/">Halo</a>这个动态博客框架，文档资料比较全，配置步骤也还好。</p><h2 id="云服务器购买"><a href="#云服务器购买" class="headerlink" title="云服务器购买"></a>云服务器购买</h2><p>首先当然是要租一台云服务器来放这个博客，我选的是阿里云的服务器，因为只是想来练练手，所以云主机选的是<code>1核2G</code>的配置，算上新人优惠一年也才 20 多块。服务器系统我装的是用的比较多的<code>CentOS 7.4</code>，然后设个好记的<code>root</code>用户密码，其他的就没什么了。</p><h2 id="服务器端部署博客"><a href="#服务器端部署博客" class="headerlink" title="服务器端部署博客"></a>服务器端部署博客</h2><p>服务器系统装好后，需要远程登录进行操作，我用的远程登录软件是<a href="https://mobaxterm.mobatek.net/download.html">Mobaxterm</a>，集成文件传输功能，支持的协议也多。另外，在远程登录前，可以先去阿里云控制台<code>云服务器 ECS</code>面板的安全组下确认一下当前服务器的远程登录端口<code>22</code>端口是否是打开的，否则远程登录不上。</p><p>在<code>Mobaxterm</code>中新建一个<code>session</code>，选择<code>ssh</code>登录方式，然后输入云主机的公网<code>IP</code>地址，选择<code>root</code>用户登录，然后按提示输入之前设置的密码就可以成功登录了。正常来说应该创建一个新用户来进行博客的部署，但我打算就用这个服务器来搭建这个博客，没有别的用途，所以就无所谓了，直接用<code>root</code>用户开整。</p><p>到这里，就可以参考<code>Halo</code>给的<a href="https://docs.halo.run/">文档</a>来部署博客了。</p><h3 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h3><p>由于<code>Halo</code>是依赖于<code>Java</code>运行的，因此需要先安装<code>JDK</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install java-11-openjdk -y<br>java -version <span class="hljs-comment"># 查看 Java 版本，检测是否安装成功</span><br></code></pre></td></tr></table></figure><h3 id="Halo-下载与配置"><a href="#Halo-下载与配置" class="headerlink" title="Halo 下载与配置"></a>Halo 下载与配置</h3><p>首先下载<code>Halo</code>的<code>jar</code>包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/app &amp;&amp; <span class="hljs-built_in">cd</span> ~/app <span class="hljs-comment"># 创建包的存放路径并进入该目录</span><br>wget https://dl.halo.run/release/halo-1.5.4.jar -O halo.jar <span class="hljs-comment"># 下载 jar 包，重命名为 halo.jar</span><br></code></pre></td></tr></table></figure><p>然后创建<code>Halo</code>的工作目录，并编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/.halo &amp;&amp; <span class="hljs-built_in">cd</span> ~/.halo<br>wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml <span class="hljs-comment"># 下载 halo 提供的示例配置文件</span><br>vim ./application.yaml <span class="hljs-comment"># 使用 vim 编辑配置文件</span><br></code></pre></td></tr></table></figure><p><code>Vim</code>打开配置文件后如下，可以改端口号和数据库用户名密码，其他保持默认就行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8090</span> <span class="hljs-comment"># 默认端口号，可以修改</span><br>  <br>  <span class="hljs-comment"># Response data gzip.</span><br>  <span class="hljs-attr">compression:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <br><span class="hljs-attr">spring:</span> <span class="hljs-comment"># 使用 h2 数据库就行</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">org.h2.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:h2:file:~/.halo/db/halo</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span>   <span class="hljs-comment"># 在 Halo 第一次运行前可以修改</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>  <span class="hljs-comment"># 在 Halo 第一次运行前可以修改</span><br>  <span class="hljs-attr">h2:</span><br>    <span class="hljs-attr">console:</span><br>      <span class="hljs-attr">settings:</span><br>        <span class="hljs-attr">web-allow-others:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/h2-console</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">halo:</span><br>  <span class="hljs-comment"># Your admin client path is https://your-domain/&#123;admin-path&#125;</span><br>  <span class="hljs-attr">admin-path:</span> <span class="hljs-string">admin</span> <span class="hljs-comment"># 博客后台管理界面位置</span><br><br>  <span class="hljs-comment"># memory or level or redis</span><br>  <span class="hljs-attr">cache:</span> <span class="hljs-string">memory</span><br></code></pre></td></tr></table></figure><h3 id="启动-Halo"><a href="#启动-Halo" class="headerlink" title="启动 Halo"></a>启动 Halo</h3><p>回到<code>halo.jar</code>的存放目录启动<code>Halo</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/app &amp;&amp; java -jar halo.jar<br></code></pre></td></tr></table></figure><p>出现如下提示则表示安装成功，<code>Ctrl + C</code>结束运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">run.halo.app.listener.StartedListener    : Halo started at         http://127.0.0.1:8090<br>run.halo.app.listener.StartedListener    : Halo admin started at   http://127.0.0.1:8090/admin<br>run.halo.app.listener.StartedListener    : Halo has started successfully!<br></code></pre></td></tr></table></figure><p>如果是升级<code>Halo</code>版本，则可能会报错提示<code>8090</code>端口被占用，这时只需要结束占用该端口的进程就行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -tlnp | grep <span class="hljs-string">&quot;:8090&quot;</span> <span class="hljs-comment"># 查找占用 8090 端口的进程</span><br><span class="hljs-built_in">kill</span> xxxx <span class="hljs-comment"># xxxx 就是上个命令筛选出的进程所对应的进程号</span><br></code></pre></td></tr></table></figure><h3 id="设置-Halo-服务"><a href="#设置-Halo-服务" class="headerlink" title="设置 Halo 服务"></a>设置 Halo 服务</h3><p>因为最后要随时能访问博客，所以需要将<code>Halo</code>作为服务运行，<code>Halo</code>提供了服务的模板文件，将其下载并放到系统守护进程目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://dl.halo.run/config/halo.service -O /etc/systemd/system/halo.service<br>vim /etc/systemd/system/halo.service <span class="hljs-comment"># 编辑服务配置</span><br></code></pre></td></tr></table></figure><p><code>vim</code>打开后的<code>halo.service</code>如下，只需填入<code>halo.jar</code>的目录就行：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Halo Service<br><span class="hljs-attr">Documentation</span>=https://halo.run<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">User</span>=USER <span class="hljs-comment"># 这里我是 root 用户运行的，删掉这行就行，普通用户填入用户名即可</span><br><span class="hljs-attr">ExecStart</span>=/usr/bin/java -server -Xms256m -Xmx256m -jar YOUR_JAR_PATH <span class="hljs-comment"># YOUR_JAR_PATH 改为 halo.jar 的路径</span><br><span class="hljs-attr">ExecStop</span>=/bin/kill -s QUIT <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">Restart</span>=always<br><span class="hljs-attr">StandOutput</span>=syslog<br><br><span class="hljs-attr">StandError</span>=inherit<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="重新加载系统守护进程"><a href="#重新加载系统守护进程" class="headerlink" title="重新加载系统守护进程"></a>重新加载系统守护进程</h3><p>现在重新加载守护进程，并把<code>Halo</code>设为开机启动就行了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload <span class="hljs-comment"># 重新加载系统守护进程</span><br>systemctl start halo    <span class="hljs-comment"># 启动 halo 服务</span><br>systemctl <span class="hljs-built_in">enable</span> halo   <span class="hljs-comment"># 设置 halo 开机启动</span><br></code></pre></td></tr></table></figure><p>至此，<code>Halo</code>的服务器端的配置基本就完成了，最后在阿里云控制台<code>云服务器 ECS</code>面板下的安全组中找到我们的服务器，添加规则开放<code>8090</code>端口，就可以在我们自己电脑上的浏览器通过<code>主机IP地址:8090</code>来访问搭建好的博客了。</p><h2 id="域名购买与解析"><a href="#域名购买与解析" class="headerlink" title="域名购买与解析"></a>域名购买与解析</h2><p>通过<code>IP</code>访问毕竟不太方便，所以我又在阿里云上买了一个域名，算上新人优惠第一年只要 10 块钱左右，跟白嫖一样。域名买完后需要进行注册、实名认证、<code>ICP</code>备案和公安备案等一系列操作，虽然麻烦，但基本按流程走一下就行了，过程中会有阿里的客服联系确认信息。</p><p>有了域名之后，还要将域名解析到自己服务器的公网<code>IP</code>上，这个在阿里云控制台的<code>云解析 DNS</code>面板下添加记录，设置记录值为服务器主机<code>IP</code>地址就行了，</p><p>这样就可以通过<code>域名:8090</code>来访问刚刚建立的博客内容了。</p><h1 id="SSL-证书购买"><a href="#SSL-证书购买" class="headerlink" title="SSL 证书购买"></a>SSL 证书购买</h1><p>为了让服务器支持<code>HTTPS</code>，需要给服务器配置安全证书，在阿里云控制台<code>数字证书管理服务</code>面板下的<code>SSL 证书</code>选择免费证书购买，并绑定自己的域名，然后将证书压缩包<code>xxx_nginx.zip</code>下载到本地。通过<code>Mobaxterm</code>登录服务器，借助其<code>FTP</code>功能，直接将下载的证书压缩包文件拖到窗口中，就可以将证书上传到服务器中了。</p><h1 id="Nginx-反向代理配置"><a href="#Nginx-反向代理配置" class="headerlink" title="Nginx 反向代理配置"></a>Nginx 反向代理配置</h1><p>虽然按照上面的配置就可以访问我们的博客了，但还存在一个问题，那就是由于上述服务器配置是直接接受网络请求的，当有大量的连接请求访问服务器的<code>8090</code>端口时，服务器不高的配置注定了它处理不过来这么多请求，这样就可能造成服务器卡死宕机。所以对于分布式部署的服务器，一般会使用<code>Nginx</code>服务器来接收客户端的请求，并按一定规则将请求分配给不同的后端服务器，实现负载均衡，这也就是反向代理。这里我只有一台服务器，所以<code>Nginx</code>会将请求直接转发给这台服务器，这样配置的基本思路就是：<code>Halo</code>仅监测云主机本地服务器<code>127.0.0.1:8090</code>的请求，<code>Nginx</code>服务器则接收外部客户端的请求并转发给本地服务器。</p><div class="note note-info">            <p>最后一句话中的<code>Nginx</code>服务器其实就是云主机本身，只不过它不是把请求转发给别的服务器，而是转发到自己内部的本地服务器上。</p>          </div><p>关于正向代理和反向代理的区别，前者相当于是在一个局域网中的客户端想要访问外网的服务器，这时候就需要客户端设置代理，让自己的请求通过代理服务器发送到外网服务器上，代理的是客户端；而后者则是在服务器端设置代理，将客户端的请求转发给不同的服务器去处理，比如图片请求就给图片服务器处理，视频请求就给视频服务器处理等等，代理的是服务器。</p><h2 id="Nginx-编译和安装"><a href="#Nginx-编译和安装" class="headerlink" title="Nginx 编译和安装"></a>Nginx 编译和安装</h2><p>首先下载<a href="https://nginx.org/en/download.html">Nginx 官网</a>的源码到服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://nginx.org/download/nginx-1.xx.xx.tar.gz <span class="hljs-comment"># 选择适当的版本即可，我用的 1.17.10</span><br></code></pre></td></tr></table></figure><p>然后解压下载的压缩包并编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zvxf ./nginx-1.xx.xx.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> nginx-1.xx.xx <span class="hljs-comment"># 解压压缩包</span><br>./config --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module <span class="hljs-comment"># 配置编译选项</span><br>make &amp;&amp; make install <span class="hljs-comment"># 编译并安装</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>如果后面需要给服务器配置安全证书，则需要在编译选项中添加<code>--with-http_ssl_module</code>参数，否则证书配置时会报错。</p>          </div><p><code>Nginx</code>默认安装在<code>/usr/local/nginx/</code>目录下，执行以下命令测试是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/nginx/sbin/nginx -t <span class="hljs-comment"># 执行后提示 Successful 就行了</span><br></code></pre></td></tr></table></figure><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><p>接着配置<code>Nginx</code>代理，这之前需要将证书文件解压并放到<code>Nginx</code>的配置目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /usr/local/nginx/conf/cert <span class="hljs-comment"># 在 nginx 配置目录下创建保存证书的目录</span><br>unzip ./xxx_nginx.zip -d /usr/local/nginx/conf/cert <span class="hljs-comment"># 将证书文件解压到上述目录下</span><br></code></pre></td></tr></table></figure><p>然后编辑<code>Nginx</code>的配置文件，关于<code>Nginx</code>配置文件的介绍和说明可以参考<a href="https://www.cnblogs.com/knowledgesea/p/5175711.html">CNBLOGS</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p>进入编辑界面后定位到<code>http</code>模块，这里只需要编辑两个模块，首先是在<code>upstream</code>中定义<code>http</code>服务器组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs conf"># nginx.conf<br>upstream halo &#123;<br>        server 127.0.0.1:8090; # 云主机中 halo 服务的运行地址<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后是编辑<code>server</code>模块，相当于是设置具体的转发规则，即<code>Nginx</code>接收到客户端请求后，根据这里设置的规则将请求转发给不同的服务器。对于我现在这台云主机，并不需要太复杂的配置，只需将客户端的<code>http</code>和<code>https</code>请求转发到云主机的本地服务器就行，首先配置<code>http</code>请求转发规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs conf"># nginx.conf<br> server &#123;<br>        listen       80; # http 默认使用 80 端口<br>        server_name  your_domian; # 填写自己的域名<br>        rewrite ^(.*)$ https://$host$1; # 将所有 HTTP 请求通过 rewrite 指令重定向到 HTTPS<br>        #charset koi8-r;<br>        #access_log  logs/host.access.log  main;<br>        client_max_body_size 1024m; # 默认 1 M，上传大附件需要修改为较大的值<br><br>        location / &#123; # 转发规则<br>            proxy_pass http://halo;<br>            proxy_set_header HOST $host;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        &#125;<br>        # redirect server error pages to the static page /50x.html<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>然后再配置<code>https</code>请求转发规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs conf"># nginx.conf<br> server &#123;<br>        listen       443 ssl; # https 默认使用 443 端口<br>        server_name  your_domain;<br>        client_max_body_size 1024m;<br><br>        ssl_certificate cert/xxx.pem; # 填写对应的解压完的证书文件<br>        ssl_certificate_key cert/xxx.key; # 填写对应的解压完的证书私钥文件<br>        ssl_session_cache    shared:SSL:1m;<br>        ssl_session_timeout  5m;<br>        ssl_ciphers  HIGH:!aNULL:!MD5;<br>        ssl_prefer_server_ciphers  on;<br><br>        location / &#123;<br>            proxy_pass http://halo;<br>            proxy_set_header HOST $host;<br>            proxy_set_header X-Forwarded-Proto $scheme;<br>            proxy_set_header X-Real-IP $remote_addr;<br>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        &#125;<br>        # redirect server error pages to the static page /50x.html<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>配置完后启动<code>Nginx</code>进行代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf <span class="hljs-comment"># 指定 Nginx 配置文件位置</span><br>/usr/local/nginx/sbin/nginx -s start  <span class="hljs-comment"># 启动 Nginx</span><br>/usr/local/nginx/sbin/nginx -s reload <span class="hljs-comment"># 配置文件修改后。重新加载 Nginx</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>配置文件修改后，重新加载<code>Nginx</code>可能会报错，这时一般先指定一下配置文件的位置，再重新加载一次就可以了。</p>          </div><p>最后还需要检查云主机的<code>80</code>和<code>443</code>端口是否已打开，打开后就可以使用域名安全地访问博客了，这时候就可以把云主机的<code>8090</code>端口对外关闭，只通过<code>Nginx</code>对博客进行访问。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次从头开始的博客搭建让我学到了很多知识，也积累了一些建站的经验，关于<code>Nginx</code>还需要学习的地方也还很多，慢慢来吧。</p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>最近由于课题组服务器资源紧张，于是在阿里云上租了一个<code>16核32G</code>配置的<code>Windows</code>服务器来跑数值模拟，因为在浏览器登录和管理服务器太不方便了，就想着用<code>Windows</code>自带的远程桌面在自己的电脑上登录服务器使用。结果发现登不上去，于是就开始找问题：</p><ul><li>1.检查<code>Windows</code>远程登录端口<code>3389</code>否打开——没问题</li><li>2.检查服务器是否开启远程登录以及管理员是否有远程登录权限——没问题</li><li>3.检查<code>Windows</code>防火墙出入站规则——和阿里云安全组设的是一致的，没问题</li></ul><p>一通操作之后还是登录不上，结果在阿里云的帮助里看到最后一条换网络环境，于是用电脑连手机热点，就登上去了😅。</p>]]></content>
    
    
    <categories>
      
      <category>计科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PFC 学习笔记-003</title>
    <link href="/2022/09/07/PFC-Notes-003/"/>
    <url>/2022/09/07/PFC-Notes-003/</url>
    
    <content type="html"><![CDATA[<p>理解篇，PFC 6.0 编程</p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://wanghao6736.github.io/2022/01/08/PFC-Notes-002/">上篇笔记</a>说到<code>PFC 5.0</code>后的版本支持命令流、<code>Fish</code>和<code>Python</code>三种方式进行编程，这篇笔记就来谈谈我对<code>PFC 6.0</code>中这三种编程方式的理解。<code>PFC</code>建模其实就是通过编程建立不同类型的对象，这些对象有的是<code>itasca</code>系列软件通用的，如<code>model</code>，<code>geometry</code>，<code>group</code>等，有的则是<code>PFC</code>独有的，如<code>ball</code>，<code>clump</code>，<code>contact</code>等。通用的对象一般具有工具属性，用于辅助模型建立或者模型数据记录和导出等，<code>PFC</code>独有的对象则是我们建模的主体，它们的属性、行为和相互作用是我们编程的重点。</p><p>对于建模方式，通过在 PFC 默认的控制台<code>console</code>中一条一条地输入命令的方式显然不实际，一般是将命令按顺序写入文本文件（脚本）中，然后程序再自动按顺序运行；默认的控制台只能用于输入命令或者<a href="#Fish-%E8%AF%AD%E5%8F%A5%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%B5%81%E5%B5%8C%E5%A5%97">嵌入的</a><code>Fish</code>语句，对于<code>python</code>，<code>PFC 6.0</code>内置了<code>ipython</code>控制台，支持<code>tab</code>命令自动补全，使用起来很方便。</p><h1 id="命令流建模"><a href="#命令流建模" class="headerlink" title="命令流建模"></a>命令流建模</h1><h2 id="基本语法格式"><a href="#基本语法格式" class="headerlink" title="基本语法格式"></a>基本语法格式</h2><p>命令流是<code>PFC</code>建模的核心方式，<code>PFC</code>中的通用对象和大部分独有对象只能通过命令流的方式来创建。<code>PFC</code>的命令在手册里都有详细的描述，使用时可以提前查阅。我个人认为这些命令可以粗略地分为两类，一类为操作类命令，即对一个对象进行某种操作，语法格式为 “对象 + 操作”，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch">ball delete ; 删除所有 ball<br>program return ; 退出程序<br></code></pre></td></tr></table></figure><p>另一类为赋值类命令，即对对象的某一属性进行赋值，语法格式为 “对象 + 属性 + 值”，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch">ball attribute velocity 0 0 0 ; 设置 ball 的速度为 (0, 0, 0)<br>ball group &quot;sand&quot; ; 将 ball 分到 &quot;sand&quot; 组中<br></code></pre></td></tr></table></figure><p>除此之外，<code>PFC</code>的大多数命令都具有层级结构，即一个命令下还有二级命令，典型的如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs batch">contact cmat default model xxx ... ; 这里 xxx 为占位<br>                    method defomability emod xxx kratio xxx &amp;<br>                    property fric xxx<br></code></pre></td></tr></table></figure><p>可以看到，<code>model</code>命令下有二级命令<code>method</code>和<code>property</code>，<code>method</code>又有二级命令<code>deformability</code>，二级命令还有自己的下一级命令，具体的层级关系可以查阅手册中的命令描述。这句命令可以这样理解：首先指定操作对象，即接触模型赋值表<code>cmat</code>的<code>default</code>槽，设置该槽的接触模型<code>model</code>；然后再将<code>model</code>作为操作对象，先对其<code>defomability</code>方法 (<code>method</code>) 进行设置，包括对<code>emod</code>和<code>kratio</code>进行赋值，接着对其<code>fric</code>属性 (<code>property</code>) 进行赋值。<code>PFC 6.0</code>支持行内代码提示，英文输入状态下，按下<code>Ctrl+Space</code>就会弹出命令提示。</p><p>在<code>PFC</code>中，命令流和<code>Fish</code>语言使用分号 “;” 进行注释；当一条命令用一行写不下时，可以在该行的末尾写上 “…” 或 “&amp;”，然后在紧接着的下一行写该命令剩余的部分，也可以用这种方式来提升代码的可读性。</p><div class="note note-warning">            <p><code>PFC</code>代码中的符号必须是英文半角符号；”…” 或 “&amp;” 只连接相邻的两行命令，不能跨越空行。</p>          </div><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p>为了方便操作和管理对象，通常会对具有某一共同性质的对象进行分组，这就是<code>group</code>命令的作用，<code>group</code>下还有二级命令<code>slot</code>，可以将同一组 (<code>group</code>) 中的部分对象分入不同的槽 (<code>slot</code>)，进行更加细致的区分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch">ball group &quot;sand&quot; slot &quot;fines&quot;  ; 粉砂<br>ball group &quot;sand&quot; slot &quot;coarse&quot; ; 粗砂<br></code></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>在建模时，常常需要对一类对象中满足某一条件的对象进行操作，而不是对一类对象中的所有对象进行操作，仅限定要操作的对象范围，这就是<code>range</code>命令的作用，<code>range</code>命令在建模的过程中非常常用，使用时在需要限定范围的命令后加上<code>range</code>关键字和限定条件即可。<code>range</code>命令后的限定条件通常是某些属性范围，可以在手册中查看详细的描述，简单示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs batch">range group &quot;g1&quot;     ; 对属于 &quot;g1&quot; 组的对象进行操作<br>range group &quot;g1&quot; not ; 对不属于 &quot;g1&quot; 组的对象进行操作<br>range position-x 0 1 ; 对 &quot;x&quot; 坐标在 (0, 1) 的对象进行操作<br>range union group &quot;g2&quot; position-z 0 1 ; 对属于 &quot;g2&quot; 组或 &quot;z&quot; 坐标在 (0, 1) 的对象进行操作<br></code></pre></td></tr></table></figure><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>为了观察模型的变化，我们需要在模型执行的过程中对我们关心的状态量进行监测，如颗粒或墙体的受力情况和位移情况等等。<code>PFC</code>除了提供通用的<code>history</code>命令外，还为每个对象提供了<code>history</code>命令，在监测时推荐后者，更加符合直觉，前者更适合用来对已有的<code>history</code>进行整体操作，简单示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs batch">history name xx xxx  ; 通用的 history 命令进行监测<br>history interval 50  ; 使用通用的 history 命令设置每隔 50 时步记录一次数据<br>history delete       ; 删除所有 history<br>ball history id 1 velocity-z id 2 ; 使用 ball 对象的 history 命令监测 id 为 2 的颗粒的 z 向速度，该 history 的 id 为 1<br></code></pre></td></tr></table></figure><h3 id="plot"><a href="#plot" class="headerlink" title="plot"></a>plot</h3><p><code>plot</code>是用于绘图的命令，但通过代码编写绘图程序比较繁琐，不直观，一般直接通过<code>PFC</code>的图形化界面来绘制<code>history</code>命令监测的数据的图像，<code>plot</code>命令通常用来导出数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch">plot &quot;xxx&quot; export csv filename &quot;yyy.csv&quot;    ; 将 plot xxx 中的数据导出到名为 yyy.csv 的 csv 文件中<br>plot &quot;xxx&quot; export bitmap filename &quot;yyy.png&quot; ; 将 plot xxx 中的图像导出到名为 yyy.png 的 png 图片中<br></code></pre></td></tr></table></figure><h3 id="program"><a href="#program" class="headerlink" title="program"></a>program</h3><p><code>program</code>命令用于控制程序的运行和调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs batch">program call &quot;xxx.dat&quot; suppress ; 调用 &quot;xxx.dat&quot; 文件<br>program system &quot;mkdir a&quot; ; 执行系统命令，对于 windows 系统，相当于在命令行中执行 &quot;mkdir a&quot;，即创建文件夹 &quot;a&quot;<br>program pasue     ; 暂停程序，控制台输入 program continue 继续运行<br>program pasue key ; 暂停程序，按任意键继续<br>program return    ; 结束程序<br></code></pre></td></tr></table></figure><div class="note note-info">            <p><code>suppress</code>关键字表示关闭命令回显，即被调用的文件内的代码不会在控制台中打印。</p>          </div><h1 id="Fish-建模"><a href="#Fish-建模" class="headerlink" title="Fish 建模"></a>Fish 建模</h1><p><code>Fish</code>语言是<code>PFC</code>默认的脚本语言，可以与命令流进行相互嵌套，需要注意的是<code>PFC</code>中的这个<code>Fish</code>语言和命令行<code>Fish Shell</code>并不是一个东西，<code>Fish</code>语言的特点为：</p><ul><li>1.大多数命令成对出现</li><li>2.变量声明无类型限制，且默认为全局变量</li><li>3.可以与命令流相互嵌套</li><li>4.无法创建<code>Itasca</code>系列软件通用对象和大部分<code>PFC</code>独有对象，但基本可以读取和操作这些对象</li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><code>Fish</code>语言的语法比较简单，容易上手，和<code>Python</code>有一点类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fish">fish define foo(a, b) ; 带参数函数定义，也可以去掉括号定义无参函数<br>    a = 1 ; 声明和定义全局变量，等价于 global a = 1<br>    global b = 2<br><br>    if a # b then ; Fish 中，不等于用 &quot;#&quot; 号表示<br>        local c = a + b ; 声明和定义局部变量，作用域为其所在的命令对，这里是 if ··· endif<br>        io.out(&quot;a != b&quot;)<br>    endif<br><br>    foo = a + b ; 函数名可以赋值，相当于函数返回值，需要注意不能多次赋值，那样相当于循环调用 foo 函数<br>end<br>@foo(1, 2) ; 在函数外需要使用 &quot;@&quot; 符号调用 Fish 函数<br></code></pre></td></tr></table></figure><h2 id="Fish-方法调用"><a href="#Fish-方法调用" class="headerlink" title="Fish 方法调用"></a>Fish 方法调用</h2><p>与常见的面向对象语言不同，<code>Fish</code>语言中某类对象调用其方法的方式为 “类名.方法(对象指针&#x2F;id&#x2F;name)”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fish">[mp1 = measure.find(1)] ; 查找 id 为 1 的测量圆<br>measure.porosity(mp1)   ; 调用 measure 类的 porosity 方法查看 mp1 的孔隙率<br></code></pre></td></tr></table></figure><h2 id="Fish-语句与命令流嵌套"><a href="#Fish-语句与命令流嵌套" class="headerlink" title="Fish 语句与命令流嵌套"></a>Fish 语句与命令流嵌套</h2><p>在<code>PFC</code>中，新建了一个<code>Data file</code>后，默认是写入命令流语句或者定义<code>Fish</code>函数，想要写入单独的<code>Fish</code>语句则需要将该语句用 “[]” 括起来；在<code>Fish</code>函数中使用命令流时，需要将命令流写在<code>command ··· endcommand</code>中。以下为简单的示例，仅作说明，实际使用时会复杂一些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs fish">[rad = 1.0] ; Fish 函数外的 Fish 变量/语句需要用 &quot;[]&quot; 包起来<br>[pos = vector((0, 0, 0))] ; 这里调用了 vector 类的构造函数，传入参数为 (0, 0, 0)<br>def foo     ; fish define 可简写为 def<br>    command ; 命令流与 Fish 函数嵌套<br>        ball create id 1 radius [rad] position [pos] ; Fish 变量与命令嵌套<br>    endcommand<br>end<br></code></pre></td></tr></table></figure><p>此外，<code>Fish</code>函数中嵌套的命令不能是<code>model restore</code>或者<code>model new</code>，因为前者会用<code>.sav</code>文件中的<code>Fish</code>状态（函数、变量等）覆盖当前的<code>Fish</code>状态，后者则会清空模型内存，包括当前的<code>Fish</code>状态，两者都会和现有<code>Fish</code>状态产生冲突，因此不能在<code>Fish</code>函数中使用，这有点穿越到过去杀了自己的感觉 🤪。</p><div class="note note-warning">            <p>不建议<code>Fish</code>语言与命令流多层嵌套，那样会降低程序的可读性和易维护性。</p>          </div><h2 id="Fish-变量变化监测"><a href="#Fish-变量变化监测" class="headerlink" title="Fish 变量变化监测"></a>Fish 变量变化监测</h2><p>前面说过可以用<code>History</code>命令监测<code>PFC</code>中对象的属性，但有时候我们需要用<code>Fish</code>函数来计算模型中的各种参数，最后得到结果也保存在<code>Fish</code>变量中，这时就需要对该变量进行监测，对此，<code>PFC</code>提供了<code>fish history</code>命令，简单示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fish">fish history @a ; 监测变量 a<br>fish history name &quot;b&quot; @b ; 监测变量 a，并将该 history 命名为 &quot;b&quot;<br></code></pre></td></tr></table></figure><h2 id="常用-Fish-方法"><a href="#常用-Fish-方法" class="headerlink" title="常用 Fish 方法"></a>常用 Fish 方法</h2><p>在<code>PFC</code>中，每一类对象都有自己的专属<code>Fish</code>方法，此外<code>PFC</code>还提供了一系列工具类库，如<code>math</code>、<code>array</code>、<code>vector</code>等，所有<code>Fish</code>函数在<code>PFC</code>的手册中都有详细的说明，使用时可以根据需求去查找参考。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fish">ball.find()    ; 查找类函数<br>ball.group(bp) = &quot;sand&quot;   ; 设置属性类函数<br>gp = ball.group(bp)       ; 读取属性类函数<br>contact.list   ; 获取属性类方法<br>math.sqrt()    ; 计算类函数<br>array / vector ; 数据结构类<br></code></pre></td></tr></table></figure><div class="note note-info">            <p><code>PFC</code>独有对象的<code>Fish</code>函数大多是读写一致的，如<code>ball.group()</code>方法，它在等号左边就是写，即设置分组，在等号右边就是读，即读取分组。</p>          </div><h1 id="Python-建模"><a href="#Python-建模" class="headerlink" title="Python 建模"></a>Python 建模</h1><p><code>PFC 6.0</code>开始支持<code>Python</code>脚本，就个人使用经验来看，<code>Python</code>脚本适合用于程序的自动化运行以及程序运行结果数据的处理，对于模型的生成和模型的各种细节配置，还是得用命令流和<code>Fish</code>语言。和<code>Fish</code>语言一样，使用<code>Python</code>同样无法创建<code>Itasca</code>系列软件通用对象和大部分<code>PFC</code>独有对象，但基本可以读取和操作这些对象。</p><h2 id="在-PFC-中使用-Python"><a href="#在-PFC-中使用-Python" class="headerlink" title="在 PFC 中使用 Python"></a>在 PFC 中使用 Python</h2><p>Itasca 将其提供的对象和方法都封装在<code>itasca</code>这个包里，因此使用时需要先<code>import</code>这个包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pfc.py</span><br><span class="hljs-keyword">import</span> itasca <span class="hljs-keyword">as</span> it <span class="hljs-comment"># 导入包，设置别名为 it，方便后续使用</span><br></code></pre></td></tr></table></figure><p>当前的 Python 状态在执行了<code>model restore</code>或者<code>model new</code>命令后会被清空，要防止这种情况需要设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">it.command(<span class="hljs-string">&quot;python-reset-state false&quot;</span>)<br></code></pre></td></tr></table></figure><p>这样就可以在使用<code>model restore</code>和<code>model new</code>命令的同时保留<code>Python</code>状态了，个人猜测<code>Python</code>状态可以通过以上命令独立于模型数据之外，而<code>Fish</code>状态始终和模型数据绑定，所以前者可以使用<code>model restore</code>和<code>model new</code>命令，后者则不行。</p><h2 id="itasca-包中的类和方法"><a href="#itasca-包中的类和方法" class="headerlink" title="itasca 包中的类和方法"></a>itasca 包中的类和方法</h2><p>虽然<code>Python</code>不能创建大多数<code>PFC</code>中的对象，但<code>itasca</code>包中提供了一系列方法来获取和操作这些对象，这些方法可以分为类方法和对象方法，前者是对属于某个类的所有对象进行操作，后者则是对某个类的某个对象进行操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">it.ball.count()  <span class="hljs-comment"># 类方法，获取 ball 的数目</span><br>ball = it.ball.find(<span class="hljs-number">1</span>) <span class="hljs-comment"># 类方法，查找指定 ball</span><br>ball.density()   <span class="hljs-comment"># 对象方法，获取属性</span><br>ball.set_density() <span class="hljs-comment"># 对象方法，设置属性</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>与<code>Fish</code>不同，<code>Python</code>中提供的方法不是读写一致的，写命令通常以 “set” 开头。</p>          </div><h2 id="Python-与命令流和-Fish-交互"><a href="#Python-与命令流和-Fish-交互" class="headerlink" title="Python 与命令流和 Fish 交互"></a>Python 与命令流和 Fish 交互</h2><p>在 PFC 中，Python 与命令流交互很简单，用一个<code>command()</code>方法就可以了，与<code>Fish</code>进行交互则通过<code>fish</code>这个类来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">it.command(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">model new</span><br><span class="hljs-string">model domain extent -5e-2 6e-2 -6e-2 5e-2 -5e-2 5e-2</span><br><span class="hljs-string">model cmat default model linear property kn 1e1 dp_nratio 0.2</span><br><span class="hljs-string"></span><br><span class="hljs-string">[den = 2600]</span><br><span class="hljs-string">ball generate cubic box -0.02375 0.02375 rad 1.25e-3</span><br><span class="hljs-string">ball attr dens [den]</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br>it.fish.get(<span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-comment"># 读取 Fish 变量 a</span><br>it.fish.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">11</span>) <span class="hljs-comment"># 设置 Fish 变量 a 的值为 11</span><br>it.fish.call_function() <span class="hljs-comment"># 调用 Fish 函数</span><br></code></pre></td></tr></table></figure><h2 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h2><p>Python 的强大除了语法简单外，还在于其丰富的第三方库，在<code>ipython</code>控制台中使用<code>pip</code>命令安装即可，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pandas <span class="hljs-comment"># 安装数据处理库 pandas</span><br></code></pre></td></tr></table></figure><p><code>PFC 6.0</code>还内置了<code>PySide2</code>库，可以借助其编写图形化的交互窗口，自由度非常高。</p><h2 id="Python-的使用场景"><a href="#Python-的使用场景" class="headerlink" title="Python 的使用场景"></a>Python 的使用场景</h2><p>对于<code>PFC</code>提供的三种建模方式，个人认为命令流和<code>Fish</code>语言适合用来直接建模，而<code>Python</code>语言则适合对模型中的各种数据进行处理或者进行流程控制。我觉得典型的使用场景如下：</p><ul><li>1.命令流或<code>Fish</code>建模</li><li>2.<code>history</code>&#x2F;<code>fish history</code>监测数据</li><li>3.<code>plot export</code>导出数据</li><li>4.<code>Python</code>获取导出的数据并处理</li><li>5.根据处理的结果决定下一步操作</li></ul><p>在<code>PFC</code>模拟中，通常是设定一组模拟参数，然后等这个模拟跑完后，再手动改另一组模拟参数，接着继续跑。两次模拟不是连续的，而且第一次模拟结束的时间是不确定的，这样在需要跑大量模拟时就比较费时间。</p><p>而通过<code>Python</code>就可以使用循环在一次模拟结束后根据设定的参数自动更改模拟参数，再接着跑，使不同的模拟过程连续。而且第二组模拟的参数也可以通过第一组模拟的结果数据来进行确定，这可以大大提高参数标定的效率。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，<code>PFC</code>的三种建模方式各有优劣，需根据需要综合起来使用，比如生成位置随机的颗粒簇时，通过命令流就可以方便的实现，而通过<code>Fish</code>或者<code>Python</code>语言实现就比较麻烦；但对于需要一个一个地生成特定位置排列的颗粒时，使用命令的生成速度就远不如<code>Fish</code>或<code>Python</code>语言的生成速度了。</p><p>另外，学习这三种建模方式最好的方式就是阅读程序自带的手册，它是与软件配套的，一般不会出现命令不适配的情况，并且手册里提供了各种命令的详细用法，也有一些示例可以参考，这样上手会比上网找教程快很多，程序自带手册打开方式为点击软件菜单栏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">Help &gt; Help # 在软件内部右侧面板打开手册<br></code></pre></td></tr></table></figure><p>默认是在软件内部打开手册，可以通过以下设置改为在浏览器中打开手册：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">Tools &gt; General &gt; show help in default web browser # 设置为在浏览器里打开手册<br></code></pre></td></tr></table></figure><p>最后，学习<code>PFC</code>建议参考官方在线手册<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="PFC 官方在线手册，如[PFC 7.0 Documentation](http://docs.itascacg.com/pfc700/pfc/docproject/source/manual/pfchome.html)，注意版本对应">[1]</span></a></sup>、关注一些技术博主<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="推荐微信公众号：[超级大的 lobby](https://mp.weixin.qq.com/s/rzerfhPt9FYh0pZFFtZU9Q)">[2]</span></a></sup>、购买相关的书籍<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="PFC 相关书籍：[颗粒流（PFC5.0）数值模拟技术及应用](https://item.jd.com/12424554.html)">[3]</span></a></sup>和加入相关的学习群<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="QQ 学习群：`305143751`、`221013772`">[4]</span></a></sup>，当然最推荐的还是学习官方的手册。</p><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>PFC 官方在线手册，如<a href="http://docs.itascacg.com/pfc700/pfc/docproject/source/manual/pfchome.html">PFC 7.0 Documentation</a>，注意版本对应<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>推荐微信公众号：<a href="https://mp.weixin.qq.com/s/rzerfhPt9FYh0pZFFtZU9Q">超级大的 lobby</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>PFC 相关书籍：<a href="https://item.jd.com/12424554.html">颗粒流（PFC5.0）数值模拟技术及应用</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>QQ 学习群：<code>305143751</code>、<code>221013772</code><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>离散元</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 数学公式和文章图片管理</title>
    <link href="/2022/09/05/Math-And-Images/"/>
    <url>/2022/09/05/Math-And-Images/</url>
    
    <content type="html"><![CDATA[<p><code>Hexo</code> 中输入公式和插入图片的方法总结</p><span id="more"></span><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><h2 id="主题内置的-LaTex-显示功能"><a href="#主题内置的-LaTex-显示功能" class="headerlink" title="主题内置的 LaTex 显示功能"></a>主题内置的 <code>LaTex</code> 显示功能</h2><p><code>Hexo 5.0</code> 之前的版本可以通过主题内置的 LaTex 功能来显示数学公式，详细配置步骤可参考<a href="https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">官方文档</a>。</p><h3 id="1-更改主题配置"><a href="#1-更改主题配置" class="headerlink" title="1. 更改主题配置"></a>1. 更改主题配置</h3><p>在主题配置文件 <code>_config.*.yml</code>中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><h3 id="2-更换-Markdown-渲染引擎"><a href="#2-更换-Markdown-渲染引擎" class="headerlink" title="2. 更换 Markdown 渲染引擎"></a>2. 更换 <code>Markdown</code> 渲染引擎</h3><p><code>Hexo</code> 默认渲染引擎对数学公式的支持有限，对于复杂的公式就需要切换专门的渲染引擎，并且 <code>Hexo</code> 中渲染引擎不能共存，需要先卸载旧的渲染引擎，然后安装新的渲染引擎。</p><h3 id="3-执行-hexo-clean"><a href="#3-执行-hexo-clean" class="headerlink" title="3. 执行 hexo clean"></a>3. 执行 <code>hexo clean</code></h3><p>清理博客之前生成的文件</p><h2 id="使用-hexo-math-插件"><a href="#使用-hexo-math-插件" class="headerlink" title="使用 hexo-math 插件"></a>使用 <code>hexo-math</code> 插件</h2><p>主题内置的 <code>LaTex</code> 显示功能配置相对来说比较麻烦，对于 <code>Hexo 5.0</code> 以上的版本，可以使用 <code>hexo-math</code> 插件来显示 <code>LaTex</code> 公式，详细配置可参考<a href="https://github.com/hexojs/hexo-math#hexo-math">仓库说明</a>。</p><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-math --save<br></code></pre></td></tr></table></figure><h3 id="2-更改主题配置文件（全局配置）"><a href="#2-更改主题配置文件（全局配置）" class="headerlink" title="2. 更改主题配置文件（全局配置）"></a>2. 更改主题配置文件（全局配置）</h3><p>在主题配置文件 <code>_config.*.yml</code>中更改 <code>math</code> 项配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config.*.yml</span><br><span class="hljs-attr">math:</span><br>  <span class="hljs-attr">katex:</span><br>    <span class="hljs-attr">css:</span> <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css&#x27;</span><br>    <span class="hljs-attr">options:</span><br>      <span class="hljs-attr">throwOnError:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mathjax:</span><br>    <span class="hljs-attr">css:</span> <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/hexo-math@4.0.0/dist/style.css&#x27;</span><br>    <span class="hljs-attr">options:</span><br>      <span class="hljs-attr">conversion:</span><br>        <span class="hljs-attr">display:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">tex:</span><br>      <span class="hljs-attr">svg:</span><br></code></pre></td></tr></table></figure><h3 id="3-其他配置"><a href="#3-其他配置" class="headerlink" title="3. 其他配置"></a>3. 其他配置</h3><p>配置完成后可以在 <code>post</code> 的 <code>front-matter</code> 中指定要渲染的公式类型或者覆盖全局配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">katex:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 不对 katex 公式进行渲染</span><br><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">katex:</span> <span class="hljs-comment"># 覆盖全局配置</span><br>  <span class="hljs-attr">output:</span> <span class="hljs-string">&#x27;mathml&#x27;</span><br>  <span class="hljs-attr">felqn:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">minRuleThickness:</span> <span class="hljs-number">0.05</span><br>  <span class="hljs-attr">throwOnError:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">mathjax:</span><br>  <span class="hljs-attr">conversion:</span><br>    <span class="hljs-attr">em:</span> <span class="hljs-number">14</span><br>  <span class="hljs-attr">tex:</span><br>    <span class="hljs-attr">tags:</span> <span class="hljs-string">&#x27;ams&#x27;</span><br>  <span class="hljs-attr">svg:</span><br>    <span class="hljs-attr">exFactor:</span> <span class="hljs-number">0.03</span><br></code></pre></td></tr></table></figure><h3 id="4-示例"><a href="#4-示例" class="headerlink" title="4. 示例"></a>4. 示例</h3><p>按以上配置好后，在 <code>&#123;% mathjax %&#125;···&#123;% endmathjax %&#125;</code> 块之间写入 <code>LaTex</code> 公式的代码即可，如以下代码：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">&#123;% mathjax %&#125; <span class="hljs-comment"># katex 同理</span><br><br><span class="hljs-string">\begin&#123;matrix&#125;</span><br><span class="hljs-number">1</span> &amp; x &amp; x^<span class="hljs-number">2</span> <span class="hljs-string">\\</span><br><span class="hljs-number">1</span> &amp; y &amp; y^<span class="hljs-number">2</span> <span class="hljs-string">\\</span><br><span class="hljs-number">1</span> &amp; z &amp; z^<span class="hljs-number">2</span> <span class="hljs-string">\\</span><br><span class="hljs-string">\end&#123;matrix&#125;</span><br><br>&#123;% endmathjax %&#125;<br></code></pre></td></tr></table></figure><p>将渲染出公式：</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -4.018ex;" xmlns="http://www.w3.org/2000/svg" width="9.232ex" height="9.167ex" role="img" focusable="false" viewBox="0 -2275.9 4080.6 4051.8" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,1442)"><g data-mml-node="mtd"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g></g><g data-mml-node="mtd" transform="translate(3072,0)"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-42)"><g data-mml-node="mtd"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1541,0)"><g data-mml-node="mi"><use data-c="1D466" xlink:href="#MJX-1-TEX-I-1D466"></use></g></g><g data-mml-node="mtd" transform="translate(3113,0)"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D466" xlink:href="#MJX-1-TEX-I-1D466"></use></g><g data-mml-node="mn" transform="translate(523,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1525.9)"><g data-mml-node="mtd"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1553.5,0)"><g data-mml-node="mi"><use data-c="1D467" xlink:href="#MJX-1-TEX-I-1D467"></use></g></g><g data-mml-node="mtd" transform="translate(3125.5,0)"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D467" xlink:href="#MJX-1-TEX-I-1D467"></use></g><g data-mml-node="mn" transform="translate(498,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></g></g></g></g></svg></mjx-container><p>可以使用 <code>tag&#123;&#125;</code> 对公式进行手动编号，同时公式会居中显示：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;% mathjax %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">\begin</span><span class="hljs-template-variable">&#123;equation&#125;</span><span class="language-xml"></span><br><span class="language-xml">\beta^*(D) = \mathop</span><span class="hljs-template-variable">&#123;argmin&#125;</span><span class="language-xml"> \limits_</span><span class="hljs-template-variable">&#123;\beta&#125;</span><span class="language-xml"> \lambda </span><span class="hljs-template-variable">&#123;||\beta||&#125;</span><span class="language-xml">^2 + \sum_</span><span class="hljs-template-variable">&#123;i=1&#125;</span><span class="language-xml">^n max(0, 1 - y_i f_</span><span class="hljs-template-variable">&#123;\beta&#125;</span><span class="language-xml">(x_i)) \tag</span><span class="hljs-template-variable">&#123;1&#125;</span><span class="language-xml"></span><br><span class="language-xml">\end</span><span class="hljs-template-variable">&#123;equation&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;% endmathjax %&#125;</span><br></code></pre></td></tr></table></figure><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.611ex; min-width: 58.371ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.354ex" role="img" focusable="false" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path><path id="MJX-1-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-I-1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -1654.2)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078,0) translate(-2078,0)"><g transform="translate(0 1654.2) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="10822 -1654.2 1 2808.5"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0,91.7)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D6FD" xlink:href="#MJX-1-TEX-I-1D6FD"></use></g><g data-mml-node="mo" transform="translate(599,413) scale(0.707)"><use data-c="2217" xlink:href="#MJX-1-TEX-N-2217"></use></g></g><g data-mml-node="mo" transform="translate(1002.6,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1391.6,0)"><use data-c="1D437" xlink:href="#MJX-1-TEX-I-1D437"></use></g><g data-mml-node="mo" transform="translate(2219.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2886.3,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="munder" transform="translate(3942.1,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529,0)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(980,0)"><use data-c="1D454" xlink:href="#MJX-1-TEX-I-1D454"></use></g><g data-mml-node="mi" transform="translate(1457,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(2335,0)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(2680,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="TeXAtom" transform="translate(1439.9,-870.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D6FD" xlink:href="#MJX-1-TEX-I-1D6FD"></use></g></g></g><g data-mml-node="mo" transform="translate(7222.1,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="mi" transform="translate(7222.1,0)"><use data-c="1D706" xlink:href="#MJX-1-TEX-I-1D706"></use></g><g data-mml-node="msup" transform="translate(7805.1,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(278,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mi" transform="translate(556,0)"><use data-c="1D6FD" xlink:href="#MJX-1-TEX-I-1D6FD"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1122,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1400,0) translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mn" transform="translate(1711,476.6) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(10141.9,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="munderover" transform="translate(11142.1,0)"><g data-mml-node="mo"><use data-c="2211" xlink:href="#MJX-1-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1123,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mi" transform="translate(12752.8,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(13630.8,0)"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(14159.8,0)"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(14731.8,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(15120.8,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(15620.8,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mn" transform="translate(16065.4,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(16787.7,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(17787.9,0)"><g data-mml-node="mi"><use data-c="1D466" xlink:href="#MJX-1-TEX-I-1D466"></use></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="msub" transform="translate(18604.8,0)"><g data-mml-node="mi"><use data-c="1D453" xlink:href="#MJX-1-TEX-I-1D453"></use></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D6FD" xlink:href="#MJX-1-TEX-I-1D6FD"></use></g></g></g><g data-mml-node="mo" transform="translate(19578.1,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(19967.1,0)"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-1-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(20866,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(21255,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -1654.2 1 2808.5"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:1" transform="translate(0,841.7)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,-750)"><g data-mml-node="mtext"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use><use data-c="31" xlink:href="#MJX-1-TEX-N-31" transform="translate(389,0)"></use><use data-c="29" xlink:href="#MJX-1-TEX-N-29" transform="translate(889,0)"></use></g></g></g></g></svg></g></g></g></g></svg></mjx-container><div class="note note-info">            <p>使用以上公式块时需要注意，如果两个块之间没有文字（空格和换行不算）的话，渲染出来的两个公式就会连在一起，不会换行。</p>          </div><h1 id="图片管理"><a href="#图片管理" class="headerlink" title="图片管理"></a>图片管理</h1><h2 id="1-统一管理"><a href="#1-统一管理" class="headerlink" title="1. 统一管理"></a>1. 统一管理</h2><p>在本地或者 <code>Hexo</code> 博客的 <code>source</code> 文件夹下创建一个图片文件夹 <code>img</code>，文章中所有图片都放在这个文件夹下，然后在文章中采用绝对或者相对路径来引用图片，目前我是用的第二种相对路径引用方法。</p><h2 id="2-按文章管理"><a href="#2-按文章管理" class="headerlink" title="2. 按文章管理"></a>2. 按文章管理</h2><p>所有的图片都放在一起会显得比较杂乱，因此统一管理对图片的命名要求较高，需要根据图片名区分其作用或者引用位置等；<code>Hexo</code> 提供了为每篇文章单独建立 <code>asset</code> 文件夹的方法，只需要在全局配置文件 <code>_config.yml</code> 中进行以下设置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-comment"># _config.yml</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>配置好后将对应文章的图片放在对应的 <code>asset</code> 文件夹中，再通过相对引用的方式引用。</p><div class="note note-info">            <p>开启资源文件夹后，引用时只需输入图片相对于<code>asset</code>文件夹的路径。</p>          </div><h2 id="3-其他方式"><a href="#3-其他方式" class="headerlink" title="3. 其他方式"></a>3. 其他方式</h2><p>除此之外，也可以将图片上传到图床中，通过远程链接来直接引用图片。</p><h2 id="4-Hexo-引用图片示例"><a href="#4-Hexo-引用图片示例" class="headerlink" title="4. Hexo 引用图片示例"></a>4. <code>Hexo</code> 引用图片示例</h2><p>通过 <code>Markdown</code> 语法引用图片:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">MD_img</span>](<span class="hljs-link">/img/post/post10.jpg &quot;Markdown image&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/post/post10.jpg" alt="MD_img" title="Markdown image"></p><p>通过 <code>HTML</code> 语法引用图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/img/post/post10.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">600px</span> <span class="hljs-attr">height</span>=<span class="hljs-string">400px</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;HTML image&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div align="center"><img src="/img/post/post10.jpg" width=600px height=400px alt="HTML image"></div>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ollie 学习记录</title>
    <link href="/2022/02/26/Ollie-Progression/"/>
    <url>/2022/02/26/Ollie-Progression/</url>
    
    <content type="html"><![CDATA[<p>16 年大一入学买的滑板，鸽到 22 年才开始练 Ollie</p><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>16 年 9 月大学军训那会兴致勃勃地买了个滑板，滑了一学期多就放在角落落灰了，当时想等到大二课少了再滑，结果大二课也多，大三又搬校区了，后面直到本科毕业都没再滑了 😂。毕业后一直放在家里二楼上，今年寒假 3 岁的外甥女来家里玩看到了，非要拿到楼下去玩，结果她玩一会就不玩了，我倒是又重新燃起了玩滑板的热情······从 1 月底到 2 月 10 号左右两周多的时间，基本上每天午饭和晚饭后都会练一个小时多，最后总算是勉强学会了，在这里大概记录一下我学习 Ollie 的过程，以后忘了还可以回来复习一下。</p><h2 id="学-Ollie-的前期准备"><a href="#学-Ollie-的前期准备" class="headerlink" title="学 Ollie 的前期准备"></a>学 Ollie 的前期准备</h2><p>Ollie 可以说是刚玩滑板的大门槛了，它要求从滑板上跳起来再落回板上，对平衡还是有一定要求的。所以学 Ollie 前应该尽量把基本的滑行和荡板学会，保证自己不会轻易地从板上摔下来。我当时买完滑板也就学会了滑行和荡板，后面就没怎么玩滑板了，直到今年寒假才开始练 Ollie。最后的准备就是买一双专业的滑板鞋来玩滑板，比较耐造一点。</p><h2 id="Ollie-的原理"><a href="#Ollie-的原理" class="headerlink" title="Ollie 的原理"></a>Ollie 的原理</h2><p>关于 Ollie 的原理，网上随便一搜就有一大堆视频&#x2F;文章解释，总结起来就是起跳并用后脚点板使板翘起来，然后前脚掌垂直于板面立起来，用鞋的侧面接触板面上的砂纸，然后前脚向前刷板，把板带到空中，最后再落回板上，按我的经验每步的详细操作如下：</p><h3 id="起跳"><a href="#起跳" class="headerlink" title="起跳"></a>起跳</h3><p>起跳前先站好脚位：后脚踩在板尾上，后脚掌刚好盖住板尾就行，后脚尖不要伸出板面；前脚掌踩在板面上前部四颗桥钉靠后的位置，预留出足够的刷板空间，前脚尖同样不要伸出板面。起跳的时候要保持自身的重心在板的中心，不然就会失去平衡，同时前腿要弯曲并向上抬，不要阻碍滑板翘起来。</p><h3 id="点板"><a href="#点板" class="headerlink" title="点板"></a>点板</h3><p>点板时用后脚掌往下压板尾，后脚跟不动，并且点板要使板尾碰到地面，让板反弹起来，成功地点板后能很明显地听到板尾碰撞地面发出的“哒”的声音。另外点板也要注意保持板的方向保持不变，这个可以通过不断微调后脚的脚位来找到最佳的点板位置。</p><h3 id="刷板"><a href="#刷板" class="headerlink" title="刷板"></a>刷板</h3><p>点板之后滑板处于倾斜的状态，这时候前脚掌要立起来，让前脚背尽可能地接近板面，然后用鞋的侧面向前刷板，把滑板带到空中，最后双脚再落回板上。</p><h2 id="Ollie-的练习方法"><a href="#Ollie-的练习方法" class="headerlink" title="Ollie 的练习方法"></a>Ollie 的练习方法</h2><p>根据 Ollie 原理分三步来练习就好了，网上的教学视频一般是按点板-起跳-刷板的顺序教的，我自己是按起跳-点板-刷板的顺序练的，其实也差不多。</p><h3 id="起跳练习"><a href="#起跳练习" class="headerlink" title="起跳练习"></a>起跳练习</h3><p>练起跳比较简单，就站在板上跳起来再落回板上，只要把平衡控制好就行了，滑行和荡板都会的话，练起跳应该问题不大。这一步最大的问题可能就是不敢跳，我一开始也是，但只要报着大不了就是摔一跤的心态去跳，就会发现这也不是很难，也没那么容易摔，简而言之就是莽就完了，这步我大概练了两天左右，保证跳起来不会摔下去后再练的点板。</p><h3 id="点板练习"><a href="#点板练习" class="headerlink" title="点板练习"></a>点板练习</h3><p>点板我分成两步来练的：第一步是前脚踩在地上，后脚点板，找到点板合适的脚位，让点板后板的方向不发生改变；第二步是前脚踩在板上，起跳的同时后脚点板。第一步没啥问题，只要注意点板用脚掌下压，脚跟保持悬空就行，当然也要保证板尾触地。第二步的问题主要是起跳结合点板后，自己的重心可能会偏，或是向前或是向后，导致起跳后落不回板上，我在这步卡了两三天，最后刷了很多教学视频才解决：起跳的时候身体稍微前倾，让目光大概位于板沿的中央，然后跳起过程中有意识地保持上半身不向四周偏，这样重心就不会偏离板的中央了。这步的另一个问题就是板尾还没触地，前脚就把板踩了下去，这个我认为是起跳后前脚弯曲向上抬的幅度不够和点板力度不够导致的，这步也没什么技巧，只能不断地练不断地找感觉，这个问题一直贯穿我学 Ollie 的整个过程。</p><h3 id="刷板练习"><a href="#刷板练习" class="headerlink" title="刷板练习"></a>刷板练习</h3><p>刷板是我卡得最久的项目，同样是分两步练：第一步后脚踩住板尾，保持滑板倾斜，然后把前脚立起来，用鞋得侧面练习刷板，找刷板的感觉，这一步我感觉没啥用，练的比较敷衍；第二步就是加上点板和起跳一起练，这步遇到的第一个问题就是前脚侧不过来，继续练了两三天，前脚就能侧过来了。这时又遇到了第二个问题，就是前脚虽然侧过来了，但是没有刷板，后轮还是没有离开地面，这个问题卡了我得有一周左右。终于在 2 月 9 号，我脑子突然开窍了，做出来了一个 Ollie，虽然只跳起来了一点点，但后面继续练也没成功几次。后面两天又做出了几个 Ollie，只有两个我觉得做得还行，大概有 10cm 高。以我的经验的话，成功的 Ollie 能明显地感觉到滑板给前脚刷板的反馈，然后就是刷板尽量让自己的前脚背靠近板面，这样刷板的成功率比较高。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只要找个宽阔的场地，学 Ollie 其实并不容易摔跤，最主要的还是多练多总结经验，卡住了就刷教学视频找找感觉，其他的莽就完了。可惜我们 2 月 13 号就得返校，没来得及把 Ollie 巩固一下，不知道今年回去还能不能再把 Ollie 做出来。</p>]]></content>
    
    
    <categories>
      
      <category>运动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>滑板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PFC 学习笔记-002</title>
    <link href="/2022/01/08/PFC-Notes-002/"/>
    <url>/2022/01/08/PFC-Notes-002/</url>
    
    <content type="html"><![CDATA[<p>认识篇，PFC 基本建模</p><span id="more"></span><h1 id="PFC-模型生成及预平衡"><a href="#PFC-模型生成及预平衡" class="headerlink" title="PFC 模型生成及预平衡"></a>PFC 模型生成及预平衡</h1><h2 id="PFC-项目文件夹构成"><a href="#PFC-项目文件夹构成" class="headerlink" title="PFC 项目文件夹构成"></a>PFC 项目文件夹构成</h2><p>PFC 6.0 支持以命令流、Fish 语言、Python 语言三种方式编写模型代码，并且三类方式可以在一定程度上交叉使用，灵活度很高，一个完整的 PFC 6.0 项目文件夹一般包括如下几类文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">*.*prj - 以json格式保存的项目配置信息<br>*.*dat - 命令流文件，一般是建模代码<br>*.*fis - Fish函数文件，定义模型需要用的函数<br>*.*sav - 状态文件，保存模型某一时刻的状态<br>*.result - 结果文件，保存程序运行结果<br>*.backup - 备份文件，防止程序意外终止<br>*.temp - 程序运行时的临时文件<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>PFC 6.0 一般在文件后缀中采用 3 和 2 来标识该文件是三维还是二维的项目文件，如<code>*.p3dat</code>、<code>*.p3prj</code>等表示的就是三维的项目文件。</p>          </div><p>由于 PFC 是允许 Fish 代码与命令流相互嵌套使用的，所以在模型比较简单的情况下，Fish 函数可以直接写在<code>*.*dat</code>的命令流文件中；但当模型比较复杂时，还是建议将 Fish 函数单独提取到<code>*.*fis</code>文件中，方便调试和管理。<br>此外，PFC 命令流和 Fish 代码也可以直接写在<code>*.txt</code>文本文档中，程序也能识别和运行；PFC 6.0 也加入了对 python 的支持，可以将模型代码写在<code>*.py</code>文件中。</p><div class="note note-info">            <p>使用 Python 时，命令流或 Fish 代码是以字符串的形式作为参数使用的，具体在后面的 Python 部分介绍。</p>          </div><h2 id="PFC-模型生成"><a href="#PFC-模型生成" class="headerlink" title="PFC 模型生成"></a>PFC 模型生成</h2><h3 id="1-基本设置"><a href="#1-基本设置" class="headerlink" title="1.基本设置"></a>1.基本设置</h3><p>打开软件新建项目后，再新建一个<code>*.*dat</code>格式的 Datafile，即可开始编写模型代码。建立新模型前，如果内存中还保存着之前运行的模型或者函数，就有可能与新模型发生冲突，所以程序的开始一般用<code>model new</code>命令来清空程序内存，为建立新模型做准备。<br>接下来就是为新模型指定一个合适生成空间，能容纳下新模型即可，不宜过大。命令为<code>model domain</code>，其中<code>extent</code>关键字指明模型<code>x</code>、<code>y</code>、<code>z</code>方向上的范围，缺省就和前一项取相同范围；关键字<code>condition</code>指明颗粒超出<code>domain</code>后的操作，<code>destory</code>表示颗粒超出<code>domain</code>后就销毁，以上命令的具体说明可参见程序文档。<br>此外，由于 PFC 的颗粒是随机生成的，每次的结果都不同，为了模拟的可重复性和调试的准确性，需要在颗粒生成前为模型指定一个随机种子，命令为<code>model random</code>，一般设置为一个大于 10000 的正整数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs batch">model new<br>model domain extent -1 1 condition destory<br>model random 10001<br></code></pre></td></tr></table></figure><h3 id="2-约束设置"><a href="#2-约束设置" class="headerlink" title="2.约束设置"></a>2.约束设置</h3><p>模型的生成空间设置好后，就可以设置模型的物理结构了，通常是墙体的设置。PFC 6.0 中创建墙体有如下几种方式，具体使用参见程序文档中的相关命令说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs batch">wall create   # 连接一系列指定的点创建<br>wall generate # 以球体、平面等基本几何体创建<br>wall import   # 导入外部 CAD 文件或从 Geometry 创建<br></code></pre></td></tr></table></figure><p>另外，PFC 6.0 自带与 FLAC 耦合，还可以使用<code>wall-structure create</code>命令以 FLAC 中的<code>structure</code>单元为模板创建墙体。</p><h3 id="3-颗粒生成"><a href="#3-颗粒生成" class="headerlink" title="3.颗粒生成"></a>3.颗粒生成</h3><p>墙体设置好后就可以生成颗粒了，PFC 中的颗粒对象有 Ball 和 Clump。由多个 Ball 组成的刚性整体就是 Clump，它不会发生变形；而多个 Ball 通过一定的强度的黏结组合成的整体叫做 Cluster，当 Ball 间的黏结破坏后，Cluster 便退化为 Ball。<br>此外 PFC 中还有一类对象 Rigid Blocks —— 可以看作是填满 Ball 的具有封闭边界的小单元，一般用来模拟各种封闭的凸多面体&#x2F;多边形。<br>这里主要介绍 Ball 和 Clump 的生成，因为其他两类对象我没用过 😂，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs batch">ball/clump create     # 生成单个颗粒<br>ball/clump generate   # 按孔隙率和粒径范围批量生成，颗粒间无重叠<br>ball/clump distribute # 按孔隙率和粒径范围批量生成，颗粒间有重叠<br></code></pre></td></tr></table></figure><p><code>create</code>命令主要用于需要精确控制颗粒半径和位置的情况，如柔性三轴中生成颗粒膜；<code>generate</code>命令生成颗粒时会确保颗粒间无重叠，因此平衡后的孔隙率会略大于设定值；<code>distribute</code>命令生成颗粒时不会检查颗粒是否重叠，导致生成后的颗粒间可能存在大量的重叠，产生较大的内力，因此成样后需要将颗粒充分地弹开，以减小不平衡力。</p><p>此外，还可以通过 Clump 模板生成 Clump 颗粒，这种方法需要首先创建 Clump 模板，然后再配合<code>generate</code>或<code>distribute</code>命令的<code>templates</code>关键字指定要使用的模板就可以了。</p><p>一般生成颗粒时，我们还希望控制颗粒的级配，这可以通过<code>distribute</code>命令中的<code>bin</code>关键字实现，一个<code>bin</code>对应于一小段粒径范围；使用<code>generate</code>命令中的<code>fish-distribution</code>关键字还可以按自定义的 Fish 函数返回值确定颗粒粒径。</p><h3 id="4-颗粒参数和接触模型设置"><a href="#4-颗粒参数和接触模型设置" class="headerlink" title="4.颗粒参数和接触模型设置"></a>4.颗粒参数和接触模型设置</h3><p>颗粒和墙体生成完毕后，需要设置颗粒和墙体的基本参数，如颗粒的密度、摩擦系数和墙体的速度等；另外还需要设置颗粒间以及颗粒和墙体间的接触模型——可以理解为颗粒相互作用时两者接触面上的力和弯矩等的计算规则。</p><p>在 PFC 中颗粒的基本参数包括两类，一类是颗粒内在的属性，如密度、速度、位移、受到的力和弯矩等，通过<code>attribute</code>命令设置；另一类是颗粒与接触相关的属性，如摩擦系数、法向刚度和切向刚度等，通过<code>property</code>命令设置。</p><p>PFC 中接触模型的设置有两种方式，首先是通过 CMAT (Contact Model Assign Table) 命令进行设置，命令格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs batch">contact cmat default type ··· model ···<br>contact cmat add 1 model ···<br>contact cmat apply # 应用 CMAT 设置的接触<br></code></pre></td></tr></table></figure><p><code>default</code>关键字表示设置默认的接触模型，<code>tpye</code>关键字用来限制接触的类型，如颗粒与颗粒的<code>ball-ball</code>接触和颗粒与墙体的<code>ball-facet</code>接触等；<code>add</code>关键字表示向接触模型表中添加一类接触模型，其后跟的整数越小，表明该接触模型的优先级越高。当有新的接触生成时，PFC 会优先遍历<code>add</code>命令设置的接触模型（有多个则根据其后数字的优先级来确定遍历顺序），如果新接触满足该接触模型的限制条件，则为新接触设置该接触模型，如果不满足则继续判断下一个接触模型，如果均不满足，则使用<code>default</code>命令设置接触模型。</p><p>第二种方式是使用<code>contact</code>命令直接设置接触模型，用法如下。两种方式的区别在于：第二种方式仅对当前模型中存在的接触生效，而第一种方式对于模型之后新生成的接触也有效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">contact model/method/property ···<br></code></pre></td></tr></table></figure><p>最后需要说的是，这里只是介绍了接触模型的基本设置方法，具体的命令使用说明可以参考官方文档。并且进行接触设置时通常会用到<code>Range</code>命令来限制要设定的范围，它是 PFC 中的一个很重要也很常用的命令，后面放到常用命令里说。</p><h2 id="PFC-模型预平衡"><a href="#PFC-模型预平衡" class="headerlink" title="PFC 模型预平衡"></a>PFC 模型预平衡</h2><p>由于颗粒是随机在模型区域中生成的，因此颗粒生成完毕后模型内部的应力处于混乱的状态，并未达到完全平衡，不符合实际的试验条件。在 PFC 中一般通过不平衡力比（Unbalanced Force Ratio，PFC6.0 中关键字为<code>ratio-average</code>，PFC5.0 中关键字为 aratio）来评价模型内部应力是否达到平衡，它是指模型中所有颗粒所受到的力的矢量和与这些力的标量和之比，一般当模型的不平衡力比求解到 1e-5 或更小就认为模型已经达到平衡状态了。</p><p>有些情况下，模型预平衡时不平衡力比无法收敛到 1e-5，而是在一个大于 1e-5 的值附近波动，这可能是因为模型中存在一些悬浮的颗粒，它们处于自由运动的状态，从而导致不平衡力不收敛，这种情况下可以删掉悬浮颗粒或者适当放大悬浮颗粒的半径再进行预平衡。预平衡耗时较长时，可以采取一些技巧来提高效率，比如对于孔隙率较小的模型给颗粒设置适当大的摩擦系数，比如 0.5，对于孔隙率较大的模型则设置较小的摩擦系数。</p><p>最后，当颗粒是在由墙体围成的区域内生成时，预平衡前一般会先将颗粒的位置适当放缩，使所有颗粒位于墙体的内部，防止预平衡时有颗粒飞出墙体之外，导致不平衡力比不收敛，可以通过<code>multiply</code>关键字实现这个操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">ball attribute position multiply 0.95 range ···<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>离散元</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PFC 学习笔记-001</title>
    <link href="/2021/11/16/PFC-Notes-001/"/>
    <url>/2021/11/16/PFC-Notes-001/</url>
    
    <content type="html"><![CDATA[<p>初见篇，初步了解 PFC</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>研一下就开始断断续续地学<code>PFC</code>，到现在也快接近一年时间了，网上教程比较杂，也没有找到比较好的，现在来看还是官方给的文档最靠谱。<code>PFC (Particle Flow Code)</code>是美国<code>ITASCA</code>公司开发的一款离散元仿真软件，主要基于离散元理论来模拟仿真实际的岩土工程问题。</p><h3 id="1-PFC-模型构成"><a href="#1-PFC-模型构成" class="headerlink" title="1. PFC 模型构成"></a>1. PFC 模型构成</h3><p>不严谨的来看，<code>PFC</code>模型主要由域、约束和颗粒集合三部分构成，域是容纳整个模型的空间，模型不能超出域的范围，约束可以看作是限制颗粒位移的边界，而颗粒集合体则是研究的主要对象。</p><h3 id="2-PFC-仿真原理"><a href="#2-PFC-仿真原理" class="headerlink" title="2. PFC 仿真原理"></a>2. PFC 仿真原理</h3><p><code>PFC</code>中的颗粒为刚性体，不会产生变形，当两个颗粒相互重叠时，这两个颗粒间便产生了相互作用的力，颗粒的重叠量和刚度越大，相互作用的力就越大，而颗粒间相互作用力的计算规则是由接触模型定义的，接触模型又与岩土体的本构模型直接相关，通过设置不同的接触模型，便可以模拟不同特征的岩土体。</p><p>模型建立完毕之后，<code>PFC</code>会每隔一段时间计算颗粒间的重叠量，进而得到颗粒的受力情况，然后根据牛顿第二定律计算颗粒的加速度，从而就能得到这段时间内颗粒的位移，最后<code>PFC</code>会根据计算出的位移更新所有颗粒的位置，然后进入下一阶段的循环，而这一段循环所用的时间就叫做时步，由<code>PFC</code>根据颗粒刚度和颗粒半径来计算。</p><h3 id="3-PFC-建模方式"><a href="#3-PFC-建模方式" class="headerlink" title="3. PFC 建模方式"></a>3. PFC 建模方式</h3><p><code>PFC</code>通过编写代码来生成模型，最基本的代码形式就是命令流，命令格式为关键字+参数，通常一个父命令还包括多个子命令。对于简单的模型生成，直接通过命令流就可以实现，但当涉及到循环控制、动态监测或更改模型状态等到操作时，就需要借助其他的编程语言了。</p><p><code>PFC</code>原生支持的编程语言是<code>FISH</code>语言，<code>PFC 5.0</code>之后的版本加入了对<code>Python</code>语言的支持，前者与命令流可以相互嵌套使用，而后者则是将命令流当作函数参数传入来实现相关的命令操作；对于同样的模型，采用<code>Python</code>编写出的模型执行效率要高于采用<code>Fish</code>编写的模型。</p><h2 id="PFC-建模流程"><a href="#PFC-建模流程" class="headerlink" title="PFC 建模流程"></a>PFC 建模流程</h2><h3 id="1-设置模型域"><a href="#1-设置模型域" class="headerlink" title="1.设置模型域"></a>1.设置模型域</h3><p>指明模型生成的范围，这是<code>PFC</code>建模的必须选项，模型的任何部分都不能超出这个范围，否则程序会直接报错中止。</p><h3 id="2-设置模型边界条件"><a href="#2-设置模型边界条件" class="headerlink" title="2.设置模型边界条件"></a>2.设置模型边界条件</h3><p>模型的边界条件可以是直接由<code>PFC</code>生成的墙体或者是导入外部几何体作为墙体——例如<code>AutoCAD</code>创建的几何模型。</p><h3 id="3-创建颗粒并设置颗粒参数"><a href="#3-创建颗粒并设置颗粒参数" class="headerlink" title="3.创建颗粒并设置颗粒参数"></a>3.创建颗粒并设置颗粒参数</h3><p><code>PFC</code>可以通过<code>Ball</code>命令生成球形颗粒，也可以通过<code>Clump</code>命令生成异形颗粒，生成的方式也有很多，具体后面再说。颗粒创建后一般需要设置其基本参数，如密度<code>density</code>、摩擦系数<code>fric</code>和阻尼<code>damp</code>等。</p><h3 id="4-设置适当的接触模型"><a href="#4-设置适当的接触模型" class="headerlink" title="4.设置适当的接触模型"></a>4.设置适当的接触模型</h3><p>根据要仿真的岩土体特点，选择一个适当的接触模型以达到较好的仿真效果，对于不同对象间的接触——如颗粒与墙体和颗粒与颗粒的接触，可以设置不同的接触模型。</p><h3 id="5-控制模型初始应力条件"><a href="#5-控制模型初始应力条件" class="headerlink" title="5.控制模型初始应力条件"></a>5.控制模型初始应力条件</h3><p><code>PFC</code>生成的颗粒位置是随机的，根据生成方式的不同，颗粒间可能还会有较大的重叠，因此颗粒生成后模型的状态与现实中的实际状态差异较大，这时就需要对模型进行一个初始状态的平衡，使其尽可能满足要仿真的实际工况。</p><h3 id="6-监测模型状态"><a href="#6-监测模型状态" class="headerlink" title="6.监测模型状态"></a>6.监测模型状态</h3><p>记录模型的状态改变是仿真的根本目的，通过监测仿真过程中模型各个参数的变化情况，进而对实际的岩土体问题从微观角度进行解释。</p><h3 id="7-设置仿真终止条件"><a href="#7-设置仿真终止条件" class="headerlink" title="7. 设置仿真终止条件"></a>7. 设置仿真终止条件</h3><p>仿真可以在循环<code>cycle</code>指定步数后终止，也可以在求解<code>solve</code>一段时间后终止，用户也可以编写函数来控制仿真的终止条件。</p><h3 id="8-模型参数标定"><a href="#8-模型参数标定" class="headerlink" title="8.模型参数标定*"></a>8.模型参数标定*</h3><p>模型参数主要包括颗粒参数和接触模型参数，这两者都是在颗粒这一微观的尺度上设置的，而现实中我们能获取的是弹性模量、应力应变曲线这些宏观的数据。通过设置适当的微观参数，使模型仿真得到的结果和实际的宏观数据一致或者接近，这个过程就是模型参数标定，参数标定一般采用三轴试验或双轴试验等单元试验，标定后的模型参数就可以用于实际岩土体问题的仿真研究了。</p><h3 id="9-回调函数"><a href="#9-回调函数" class="headerlink" title="9.回调函数*"></a>9.回调函数*</h3><p>如果想每隔一定时步就对模型执行一些特定的操作，则可以通过编写回调函数来实现。</p><div class="note note-info">            <p>本笔记所有内容均是基于 <code>PFC 6.00.13</code>版本以及其自带的帮助文档总结得到，软件版本不同，则部分命令形式也会有细微的差异，建议以官方最新的<a href="http://docs.itascacg.com/pfc700/pfc/docproject/source/manual/pfchome.html">文档</a>为准</p>          </div>]]></content>
    
    
    <categories>
      
      <category>离散元</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用系统命令总结</title>
    <link href="/2021/08/27/Common-Commands-Summary/"/>
    <url>/2021/08/27/Common-Commands-Summary/</url>
    
    <content type="html"><![CDATA[<p><code>Linux</code>系统和<code>Windows</code>系统下的常用<code>shell</code>命令汇总</p><span id="more"></span><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux-通用"><a href="#Linux-通用" class="headerlink" title="Linux 通用"></a>Linux 通用</h2><h3 id="1-文件类"><a href="#1-文件类" class="headerlink" title="1.文件类"></a>1.文件类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> <span class="hljs-comment"># 列出文件目录</span><br><span class="hljs-built_in">cp</span> <span class="hljs-comment"># 拷贝文件</span><br><span class="hljs-built_in">mv</span> <span class="hljs-comment"># 移动文件</span><br><span class="hljs-built_in">pwd</span> <span class="hljs-comment"># 显示当前所在目录</span><br><span class="hljs-built_in">whoami</span> <span class="hljs-comment"># 显示当前用户</span><br><span class="hljs-built_in">mkdir</span> [<span class="hljs-built_in">dir</span>] <span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">rm</span> [-rf] [file|<span class="hljs-built_in">dir</span>] <span class="hljs-comment"># 删除文件/目录</span><br><span class="hljs-built_in">cat</span>/tail/more/less [file] <span class="hljs-comment"># 查看文件</span><br><span class="hljs-built_in">touch</span> [file] <span class="hljs-comment"># 编辑文件，不存在则新建</span><br><span class="hljs-built_in">cd</span> ~/-/[<span class="hljs-built_in">dir</span>] <span class="hljs-comment"># 跳转到用户目录/上一个使用的目录/dir目录</span><br>find [file]  <span class="hljs-comment"># 查找文件</span><br>grep [str]   <span class="hljs-comment"># 查找字符串</span><br>&gt; / &gt;&gt; [result.txt] <span class="hljs-comment"># 标准输出重定向，覆盖之前内容/附加模式（保留之前内容）</span><br></code></pre></td></tr></table></figure><h3 id="2-包管理"><a href="#2-包管理" class="headerlink" title="2.包管理"></a>2.包管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install [pkg_name] <span class="hljs-comment"># Ubuntu，对 apt-get 命令的封装</span><br>yum install [pkg_name] <span class="hljs-comment"># CentOS</span><br></code></pre></td></tr></table></figure><h3 id="3-系统类"><a href="#3-系统类" class="headerlink" title="3.系统类"></a>3.系统类</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">su <span class="hljs-comment"># 切换到管理员模式</span><br>su -u root -p  <span class="hljs-comment"># 设置管理员密码</span><br>sudo [<span class="hljs-built_in">command</span>] <span class="hljs-comment"># 临时以管理员身份执行命令</span><br><span class="hljs-built_in">echo</span> [content] <span class="hljs-comment"># 显示某一信息</span><br>ps  <span class="hljs-comment"># 查看进程</span><br><span class="hljs-built_in">df</span>  <span class="hljs-comment"># 检查硬盘剩余空间</span><br><span class="hljs-built_in">du</span>  <span class="hljs-comment"># 检查目录所用空间</span><br>cal <span class="hljs-comment"># 显示万年历</span><br>man [<span class="hljs-built_in">command</span>]   <span class="hljs-comment"># 查看命令帮助信息</span><br><span class="hljs-built_in">which</span> [<span class="hljs-built_in">command</span>] <span class="hljs-comment"># 查询命令</span><br><span class="hljs-built_in">alias</span> [<span class="hljs-built_in">command</span>] <span class="hljs-comment"># 为命令取别名</span><br><span class="hljs-built_in">unalias</span> [name]  <span class="hljs-comment"># 删除name别名</span><br>reboot   <span class="hljs-comment"># 重启系统</span><br><span class="hljs-built_in">history</span>  <span class="hljs-comment"># 显示所有历史输入的命令</span><br>shutdown <span class="hljs-comment"># 关机</span><br>ctrl + l <span class="hljs-comment"># 清屏</span><br>mount/umount [device] [<span class="hljs-built_in">dir</span>] <span class="hljs-comment"># 挂载/取消挂载device为dir目录</span><br>[<span class="hljs-built_in">command</span>] | grep [kw] <span class="hljs-comment"># 管道命令&quot;|&quot;将command执行的结果传给grep命令，grep再根据kw进行筛选</span><br></code></pre></td></tr></table></figure><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt list <span class="hljs-comment"># 查看已安装的软件包</span><br>apt edit-sources <span class="hljs-comment"># 编辑源列表</span><br>apt [<span class="hljs-built_in">command</span>] <span class="hljs-comment"># 执行包管理命令，如：install、remove、update等</span><br></code></pre></td></tr></table></figure><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">open [file] <span class="hljs-comment"># 打开文件/目录/软件</span><br>say [str] <span class="hljs-comment"># 语音朗读str</span><br>say -f demo.txt -o [file] <span class="hljs-comment"># 朗读demo，并将结果存储到file中</span><br></code></pre></td></tr></table></figure><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="1-文件类-1"><a href="#1-文件类-1" class="headerlink" title="1.文件类"></a>1.文件类</h2><ul><li>文件批量重命名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ren *.jpg *.png <span class="hljs-comment"># 重命名jpg格式文件为png格式</span><br>ren *.* *.png   <span class="hljs-comment"># 重命名所有格式文件为png格式</span><br><span class="hljs-built_in">cd</span> -d [dist]    <span class="hljs-comment"># 目录跳转，使用-d参数支持跨盘符跳转</span><br></code></pre></td></tr></table></figure><ul><li>列出文件目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> [path] &gt; [dist]\dir.txt <span class="hljs-comment"># 列出path目录下的文件，并导出到dist目录下的dir.txt中</span><br></code></pre></td></tr></table></figure><h2 id="2-网络类"><a href="#2-网络类" class="headerlink" title="2.网络类"></a>2.网络类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig -all <span class="hljs-comment"># 查看ip配置信息</span><br>ipconfig /flushdns <span class="hljs-comment"># 刷新系统DNS缓存</span><br>ping [ip] <span class="hljs-comment"># 检查网络连通性</span><br></code></pre></td></tr></table></figure><h2 id="3-通用类"><a href="#3-通用类" class="headerlink" title="3.通用类"></a>3.通用类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cls  <span class="hljs-comment"># 清屏</span><br><span class="hljs-built_in">exit</span> <span class="hljs-comment"># 退出</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3DsMax 学习笔记</title>
    <link href="/2021/08/27/3DsMax-learning-note/"/>
    <url>/2021/08/27/3DsMax-learning-note/</url>
    
    <content type="html"><![CDATA[<p>通过<code>3Ds Max 2021</code>重新学一遍<code>3D</code>建模，顺便把本科做大创学的操作复习一下，教程推荐<code>PAPAYA</code>电脑教室-<a href="https://www.youtube.com/playlist?list=PL7enJ2-v6SPk3UTdiPlNnswxgT86n3P2B">YouTube</a> | <a href="https://www.bilibili.com/video/BV1eJ411N7hK">Bilibili 搬运</a></p><span id="more"></span><h1 id="3DsMax-基本知识"><a href="#3DsMax-基本知识" class="headerlink" title="3DsMax 基本知识"></a>3DsMax 基本知识</h1><h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><ol><li>更改项目文件夹</li><li>单位设置</li><li>首选项设置<ul><li>常规-场景撤销（建议设置 100）</li><li>文件-自动备份（建议设置为 1 钟备份 5 个文件）</li></ul></li><li>自定义用户界面-高端用户 ☺</li></ol><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol><li>归档-打包所有场景资源</li><li>视口操作<ul><li>视口最大化：<code>alt+W</code></li><li>视口移动：按住鼠标中键+拖动</li><li>视口缩放：滚动鼠标中键</li><li>视口绕<code>Gizmo</code>转动：<code>alt</code>+鼠标中键+拖动</li><li>左视图：<code>L</code></li><li>顶视图：<code>T</code></li><li>前视图：<code>F</code></li><li>透视图：<code>P</code></li><li>正交视图：<code>U</code></li></ul></li><li>对象操作<ul><li>选择：<code>Q</code></li><li>移动：<code>W</code></li><li>旋转：<code>E</code></li><li>智能缩放：<code>R</code></li><li>变换操作时用数字作为输入：<code>F12</code></li><li>加选：<code>ctrl</code>+对象</li><li>减选：<code>alt</code>+对象</li><li>反选：选中对象时按<code>ctrl+I</code></li><li>全选：<code>ctrl+A</code></li><li>从场景中选择：<code>H</code></li><li>孤立选择对象：<code>alt+Q</code></li><li>隐藏对象：<code>alt+H</code></li><li>全部取消隐藏：<code>alt+U</code></li><li>快速对齐（对其对象的轴心）：<code>shift+A</code></li><li>捕捉开关：<code>S</code></li></ul></li></ol><div class="note note-primary">            <p>选择并放置命令和快速对齐命令都与对象的轴心位置有关，设置时需要根据实际情况调整对象的轴心位置后再使用，具体为：编辑-变化工具框-对齐轴，依次设置各个轴的位置，或者通过命令面板-层次面板-轴，来修改。</p>          </div><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ol><li>新建场景：<code>ctrl+N</code></li><li>取消当前基本体模型的创建：<code>esc</code>或鼠标右键</li><li>最大化视口切换：<code>alt+W</code></li><li>模型最大化显示：<code>Z</code></li><li>部件组合：选中对象+<code>G</code></li><li>隐藏网格：选中视口+<code>G</code></li><li>基本体创建面板：<code>ctrl</code>+右键</li><li>半透明显示模型：<code>alt+X</code></li><li>显示对象网格：<code>F4</code></li><li>显示对象外框线：<code>shift+J</code></li><li>对象克隆：选中对象+<code>shift</code>+拖动</li><li>材质编辑器：<code>M</code></li><li>快速渲染当前视口：<code>shift+Q</code></li><li>创建摄像机：<code>ctrl+C</code></li></ol><div class="note note-info">            <p>使用快捷键时，确保输入法处于英文输入状态，否则快捷键可能不会生效。</p>          </div><h2 id="3DsMax-一般建模流程"><a href="#3DsMax-一般建模流程" class="headerlink" title="3DsMax 一般建模流程"></a>3DsMax 一般建模流程</h2><ol><li>建立基本模型</li><li>材质指定</li><li>打设灯光</li><li>动画制作</li><li>创建摄像机-以特定角度观察模型</li><li>静帧渲染-照片</li><li>动画渲染-视频</li></ol><div class="note note-info">            <p>使用<code>Win10</code>系统时，如果渲染时<code>3Ds Max</code>主<code>UI</code>卡死，且已经排除系统内存不够的因素，则可能是因为<code>Win10</code>自带输入法与软件不兼容，到输入法设置中将其设置为使用以前的微软拼音输入法或直接使用第三方输入法可解决该问题。</p>          </div><h1 id="建模方法和技巧"><a href="#建模方法和技巧" class="headerlink" title="建模方法和技巧"></a>建模方法和技巧</h1><h2 id="建模方法"><a href="#建模方法" class="headerlink" title="建模方法"></a>建模方法</h2><h3 id="1-布尔建模-模型加减"><a href="#1-布尔建模-模型加减" class="headerlink" title="1.布尔建模-模型加减"></a>1.布尔建模-模型加减</h3><p>在创建面板下，将标准基本体切换为复合对象即可调出布尔运算。</p><ul><li>并集</li><li>交集</li><li>差集</li></ul><h3 id="2-样条线建模-平面到立体"><a href="#2-样条线建模-平面到立体" class="headerlink" title="2.样条线建模-平面到立体"></a>2.样条线建模-平面到立体</h3><ul><li>车削</li></ul><ol><li>先用样条线绘制出对象轮廓，然后选择样条线层级</li><li>在修改面板下找到轮廓选项，绘制封闭的平行样条线</li><li>添加车削修改器，设置对齐位置</li></ol><ul><li>挤出-挤出具有一定厚度的模型</li><li>倒角-在挤出修改器的基础上添加一定的倒角</li><li>编辑技巧<ul><li>切换样条线层级快捷键：1、2、3（顶点、线段、样条线）</li><li>进入顶级层级删除样条线，处于次级层级时并不会将样条线完全删除</li><li>使用挤出修改器后得到是一个空壳模型可能是因为样条线没有完全闭合</li><li>样条线编辑时可以按退格键<code>Backspace</code>撤销上一个点</li></ul></li></ul><div class="note note-info">            <ul><li>样条线画好后，记得右键转换为可编辑样条线，否则圆角等命令可能不起作用</li><li>修改器类似于相机中的滤镜，为模型添加一定的显示效果，不需要时可直接删除修改器而保持原有模型不变</li><li>使用车削修改器时，若添加修改器后模型显示黑色，则在修改器参数中勾选翻转法线，若模型底部有空洞，则在修改器参数中勾选焊接内核</li></ul>          </div><h3 id="3-多边形建模-点、线、面编辑"><a href="#3-多边形建模-点、线、面编辑" class="headerlink" title="3.多边形建模-点、线、面编辑"></a>3.多边形建模-点、线、面编辑</h3><ul><li>快速切换选择层级：数字键 1、2、3、4 等等</li><li>环选：选择一条线段后，按<code>alt+R</code>或环选键</li><li>循环选边：双击横向线段</li><li>点层级操作<ul><li>一个或两个点焊接：<code>ctrl+shift+W</code>或者右键选择目标焊接</li><li>多点焊接：右键选焊接，调节焊接阈值（点与点之间的距离小于阈值时进行焊接）</li><li>连接对角点：<code>ctrl+shift+E</code>或右键连接&#x2F;剪切</li><li>删除废点：右键选择删除，用<code>delete</code>键或删除与点相连接的面</li></ul></li><li>边层级操作<ul><li>选择两条平行线，右键连接会在平行线间生成一条直线，打开设置窗口可以调节连接线的数量</li><li>调节边的弧度：右键切角命令</li><li>断开边：右键分割命令</li><li>连接边：选中一条边-右键焊接命令、选中两条边-右键桥命令</li><li>删除边：右键删除（删除线保留点）、<code>ctrl</code>+右键删除（删除线和点）</li><li>更改边为样条线：选择边后，右键选择或在右侧面板选择利用所选内容创建图形，再选择为要更改的类型</li></ul></li><li>边界层级操作<ul><li>边界封口：<code>alt+P</code>或右键封口</li></ul></li><li>面层级操作<ul><li>在面上插入面：右键插入（分组插入可以打开设置窗口进行设置）</li><li>将面挤出：<code>shift+E</code>或右键挤出</li><li>倒角：在挤出的基础上还可调节挤出面的轮廓大小，<code>shift+ctrl+B</code>或右键倒角</li></ul></li><li>元素层级操作<ul><li>元素渲染出反面时，可以选择翻转法线改为正面</li></ul></li><li>细分操作<ul><li>细分曲面（NURMS 细分）：在模型上插入边，运算量随迭代次数成倍增加，不同布线方式细分结果不同</li><li>涡轮平滑修改器：相较于细分曲面效率更高，一般建模完成后用其代替细分曲面</li></ul></li><li>附加操作-使多个对象成为一个可编辑的整体（对象须先转换为可编辑多边形）</li><li>分离操作-将对象的一部分独立出来，注意分离时不要产生废点</li></ul><div class="note note-info">            <p>进行多边形编辑前确保已将编辑对象转换为了可编辑多边形</p>          </div><h2 id="建模思路和技巧"><a href="#建模思路和技巧" class="headerlink" title="建模思路和技巧"></a>建模思路和技巧</h2><h3 id="1-立体建模法"><a href="#1-立体建模法" class="headerlink" title="1.立体建模法"></a>1.立体建模法</h3><ul><li>建立平面模型</li><li>给模型添加厚度<ul><li>壳修改器-生成的为立方体（实心），可能产生废面，须手动清理</li><li>挤出修改器-挤出的为壳（空心）</li></ul></li></ul><h3 id="2-盒子建模法"><a href="#2-盒子建模法" class="headerlink" title="2.盒子建模法"></a>2.盒子建模法</h3><ul><li>以方盒子概括整体结构，确定各部位比例关系</li><li>用连接命令（边层级）确定各区域，使用分割命令将各区域分割开</li><li>使用封口命令（边界层级）闭合开口面</li><li>调整各部位的细节</li></ul><h3 id="3-解构建模法"><a href="#3-解构建模法" class="headerlink" title="3.解构建模法"></a>3.解构建模法</h3><ul><li>类似分治法，将模型逐步分解为各个小构件，最后拼接起来</li><li>灵活运用样条线建模、多边形建模等方法</li></ul>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工欲善其事，必先利其器</title>
    <link href="/2021/08/22/Apps-on-my-computer/"/>
    <url>/2021/08/22/Apps-on-my-computer/</url>
    
    <content type="html"><![CDATA[<p>常用软件汇总</p><span id="more"></span><h2 id="轻量级工具类软件"><a href="#轻量级工具类软件" class="headerlink" title="轻量级工具类软件"></a>轻量级工具类软件</h2><ol><li><a href="http://www.internetdownloadmanager.com/">IDM</a></li><li><a href="https://www.win-rar.com/">WinRAR</a></li><li><a href="https://apps.microsoft.com/store/detail/quicklook/9phttwjgg81f">Splash!</a></li><li><a href="https://apps.microsoft.com/store/detail/quicklook/9p1wxpkb68kx">Snipaste</a></li><li><del><a href="https://apps.microsoft.com/store/detail/quicklook/9NV4BS3L1H4S">QuickLook</a></del></li><li><a href="https://apps.microsoft.com/store/detail/auto-dark-mode/XP8JK4HZBVF435">Auto Dark Mode</a><ul><li>推荐配合浏览器插件<code>Dark Reader</code>使用</li></ul></li><li><del><a href="https://u.tools/">uTools</a></del></li><li><a href="https://motrix.app/">Motrix</a></li><li><del><a href="https://www.typora.io/">Typora</a></del></li><li><a href="https://www.sublimetext.com/">Sublime Text</a><ul><li>安装后打开命令面板(<code>Ctrl+Shift+P</code>)，安装包管理模块(<code>Package Control</code>)</li><li>然后在命令面板输入<code>Package Pontrol: Install Package</code>打开插件市场，搜索<code>ConvertToUTF8</code>并安装，以解决中文文本显示乱码问题</li></ul></li><li><a href="https://www.iobit.com/en/iobit-unlocker.php#">IobitUnlocker</a></li><li><a href="https://github.com/zhongyang219/TrafficMonitor">TrafficMonitor</a></li><li><a href="https://github.com/Fndroid/clash_for_windows_pkg">Clash for windows</a></li><li><del><a href="https://github.com/BluePointLilac/ContextMenuManager">ContextMenuManager</a></del></li><li><a href="https://www.voidtools.com/zh-cn/">Everything</a></li></ol><h2 id="日常使用软件"><a href="#日常使用软件" class="headerlink" title="日常使用软件"></a>日常使用软件</h2><ol><li><a href="https://www.epicgames.com/store/zh-CN/">Epic</a></li><li><a href="https://store.steampowered.com/">Steam</a></li><li><a href="https://www.google.cn/chrome/">Chrome</a></li><li><a href="http://potplayer.daum.net/?lang=zh_CN">PotPlayer</a><ul><li>最新版有右下角弹窗广告，安装后通过防火墙禁用其联网权限，或者修改<code>hosts</code>文件屏蔽软件商域名</li></ul></li><li><a href="https://onedrive.live.com/">OneDrive</a><ul><li>个人版<code>Windows</code>客户端无法正常登录时需要手动设置网络的<code>DNS</code>服务器，才能解析到正确的<code>OneDrive IP</code>地址</li><li>经过实测，阿里和常用的 114 域名服务器都不能正确解析，截至 2022.03.24 能用的<code>DNS</code>有：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text"># Google 提供的 DNS<br>8.8.8.8 | 8.8.4.4<br># Microsoft 推荐的 DNS<br>4.2.2.2 | 4.2.2.1<br># 实测无法登录个人版 OneDrive 的 DNS<br>114.114.114.114 | 114.114.115.115<br></code></pre></td></tr></table></figure></li><li>按理说在<code>hosts</code>文件中手动指定<code>https://onedrive.live.com/</code>的<code>IP</code>地址为<code>13.107.42.13</code>也是可行的：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text"># hosts 文件路径：C:\Windows\System32\drivers\etc\hosts<br># 在 hosts 文件末尾添加<br>13.107.42.13 onedrive.live.com<br></code></pre></td></tr></table></figure></li><li>2022.7 更新：使用校园网的<code>DNS</code>可以正常使用，不会出现问题</li></ul></li><li><a href="https://office.qq.com/">Tim</a> &amp; <a href="https://weixin.qq.com/">WeChat</a></li><li><del><a href="https://pan.baidu.com/">百度网盘</a></del></li><li><a href="https://www.aliyundrive.com/">阿里云盘</a></li><li><a href="https://music.163.com/#/download">网易云音乐</a></li></ol><h2 id="高效工作软件"><a href="#高效工作软件" class="headerlink" title="高效工作软件"></a>高效工作软件</h2><ol><li><del><a href="https://www.endnote.com/">Endnote</a></del></li><li><del><a href="https://www.mendeley.com/">Mendeley</a></del></li><li><a href="http://www.inoteexpress.com/aegean/">NoteExpress</a></li><li><a href="https://www.office.com/">Office365</a></li><li><a href="https://www.adobe.com/cn/acrobat/pdf-reader.html">Acrobat</a></li><li><a href="https://www.foxitsoftware.cn/pdf-editor/">福昕高级PDF编辑器</a></li><li><del><a href="https://zoom.us/">zoom</a></del></li><li><a href="https://cloud.tencent.com/act/event/tencentmeeting_free">腾讯会议</a></li></ol><h2 id="专业领域软件"><a href="#专业领域软件" class="headerlink" title="专业领域软件"></a>专业领域软件</h2><ol><li><a href="https://www.originlab.com/">Origin Pro</a></li><li><a href="https://ww2.mathworks.cn/">MATLAB</a></li><li><a href="https://www.itascacg.com/software/PFC">PFC 6.0</a></li><li><a href="https://www.autodesk.com.cn/products/3ds-max/overview">3dsMax</a></li><li><del><a href="https://www.autodesk.com.cn/products/autocad/overview">AutoCAD</a></del></li><li><del><a href="https://www.image-line.com/">FL Studio</a></del></li><li><del><a href="https://www.adobe.com/cn/products/photoshop.html">Photoshop</a></del></li><li><del><a href="https://www.vmware.com/cn/products/workstation-pro.html">VMware Workstation Pro</a></del></li></ol><h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><ol><li><a href="https://www.jetbrains.com/idea/">IDEA</a></li><li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a></li><li><a href="https://mobaxterm.mobatek.net/download.html">Mobaxterm</a></li><li><del><a href="https://www.jetbrains.com/webstorm/">Webstorm</a></del></li><li><a href="https://my.visualstudio.com/Downloads">Visual Studio 2017</a></li><li><a href="https://code.visualstudio.com/">Visual Studio code</a></li><li><a href="https://dev.mysql.com/downloads/installer/">MySQL</a></li><li><a href="https://download.qt.io/archive/qt/5.12/">QT 5.12</a></li><li><a href="http://www.cburch.com/logisim/download.html">Logisim</a></li><li><a href="https://tomcat.apache.org/download-90.cgi">Tomcat 9</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用开发工具的安装及配置</title>
    <link href="/2021/08/22/Developer-tools-and-configuration/"/>
    <url>/2021/08/22/Developer-tools-and-configuration/</url>
    
    <content type="html"><![CDATA[<p>各种开发工具的安装和配置</p><span id="more"></span><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="1-安装-nvm"><a href="#1-安装-nvm" class="headerlink" title="1. 安装 nvm"></a>1. 安装 nvm</h2><p><a href="https://github.com/nvm-sh/nvm">nvm</a> 是一个用于 <code>Linux</code> 和 <code>Mac OS</code> 的 <code>nodejs</code> 版本管理工具，避免了使用不同版本 <code>node</code> 时频繁卸载安装的问题，其工作原理为更改环境变量中的 <code>node</code> 路径为指定版本的 <code>node</code> 路径。<code>Windows</code> 下类似的工具是 <a href="https://github.com/coreybutler/nvm-windows">nvm-win</a>，下载最新安装版安装即可。</p><ul><li>设置 <code>node</code> 安装目录：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm root [node_path]<br></code></pre></td></tr></table></figure><ul><li>设置 <code>nodejs</code> 镜像源：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm node_mirror https://npmmirror.com/mirrors/node/<br>nvm npm_mirror https://npmmirror.com/mirrors/npm/<br></code></pre></td></tr></table></figure><ul><li>卸载&#x2F;安装 <code>node</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm [un]install latest <span class="hljs-comment"># latest version</span><br>nvm [un]install lts <span class="hljs-comment"># latest lts version</span><br>nvm [un]install xx.xx.xx <span class="hljs-comment"># give the version number</span><br></code></pre></td></tr></table></figure><ul><li>使用指定版本 <code>node</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm use latest/lts/xx.xx.xx<br></code></pre></td></tr></table></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><ul><li>将 <code>nodejs</code> 主目录添加到环境变量 <code>path</code> 中，安装时默认添加，使用 <code>nvm</code> 时忽略这步。</li><li>配置全局模块安装目录，默认在 C 盘用户目录的 <code>AppData</code> 文件夹下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;[dest]\node_global_modules&quot;</span><br></code></pre></td></tr></table></figure><ul><li>配置包下载缓存目录，默认仍然在 C 盘用户目录 <code>AppData</code> 文件夹下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;[dest]\node_cache&quot;</span><br></code></pre></td></tr></table></figure><ul><li>配置国内镜像源，加快包的下载速度：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry=http://registry.npm.taobao.org -g<br></code></pre></td></tr></table></figure><h2 id="3-可能出现的问题"><a href="#3-可能出现的问题" class="headerlink" title="3. 可能出现的问题"></a>3. 可能出现的问题</h2><p>若安装后命令不生效，可以重启电脑或者使用管理员权限重试。</p><h2 id="4-安装-GitBook"><a href="#4-安装-GitBook" class="headerlink" title="4. 安装 GitBook"></a>4. 安装 <code>GitBook</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install gitbook-cli -g <span class="hljs-comment"># 全局安装</span><br></code></pre></td></tr></table></figure><p>检验是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitbook -V<br></code></pre></td></tr></table></figure><p>若此时卡在<code>installing GitBook 3.2.3</code>，并显示如下错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitbook-cli\node_modules\npm\node_modules\graceful-fs\polyfills.js:287:18<br>at FSReqCallback.oncomplete (fs.js:169:5)<br></code></pre></td></tr></table></figure><p>则原因为<code>gitbook-cli</code>引用了旧版的<code>graceful-fs</code>库，<del>进入<code>gitbook-cli</code>全局安装目录下的<code>node</code>依赖文件夹<code>...\gitbook-cli\node_modules\npm\node_modules</code>，执行以下命令更新<code>graceful-fs</code>库即可。</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install graceful-fs@latest --save <span class="hljs-comment"># 2022.03.17更，此操作已失效</span><br></code></pre></td></tr></table></figure><p>导致以上问题的根本原因为旧版<code>graceful-ful</code>库下<code>polyfills.js</code>文件中<code>statFix()</code>函数的问题，到<a href="https://github.com/isaacs/node-graceful-fs/">这里</a>下载修复后的<code>polyfills.js</code>文件替换原来的<code>polyfills.js</code>文件。需要注意的是，<code>gitbook-cli</code>全局安装目录下有两处出现了<code>graceful-fs</code>库，一是<code>...\gitbook-cli\node_modules\</code>，二是<code>...\gitbook-cli\node_modules\npm\node_modules</code>，这两个<code>graceful-fs</code>库中的<code>polyfills.js</code>文件都需要进行替换。</p><div class="note note-info">            <p><code>Gitbook</code> 本地版由于年久失修，使用最新版的 <code>node</code> 安装会较大概率地出现各种问题，推荐使用在线版 <a href="https://app.gitbook.com/">GitBook</a>，或使用 <code>v12.18.2</code> 及其之前版本的 <code>node</code> 安装。</p>          </div><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>在 <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Oracle 官网</a>下载 Java 1.8 安装，安装的同时也会安装 <code>jre</code>，1.8 版本使用较广，兼容性比新版本好一点。</p><h2 id="2-配置-1"><a href="#2-配置-1" class="headerlink" title="2. 配置"></a>2. 配置</h2><ul><li>新建环境变量 <code>JAVA_HOME</code>，值为 <code>jdk</code> 主目录的所在路径，一般为<code>...\jdk xx.xx.xx</code></li><li>将 <code>jdk</code> 主目录下的 <code>bin</code> 文件夹添加到环境变量 <code>path</code> 中。</li></ul><h2 id="3-验证安装"><a href="#3-验证安装" class="headerlink" title="3. 验证安装"></a>3. 验证安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -v<br>javac -v<br></code></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1. 安装"></a>1. 安装</h2><p><a href="https://www.python.org/downloads/">python 官网</a>下载安装</p><h2 id="2-配置-2"><a href="#2-配置-2" class="headerlink" title="2. 配置"></a>2. 配置</h2><ul><li><p>更改镜像源</p><p>更改 <code>pip</code> 命令的安装源为国内的镜像源，提高包的下载速度，在 C 盘的用户目录下新建文件夹 <code>pip</code>，在其中新建文件 <code>pip.ini</code>，写入以下内容：</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br>    <span class="hljs-attr">timeout</span> = <span class="hljs-number">6000</span><br>    <span class="hljs-attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple<br>    <span class="hljs-comment"># &lt;==&gt; pip install -i [index-url] [pkg_name]</span><br><span class="hljs-section">[install]</span><br>    <span class="hljs-attr">trusted-host</span> = mirrors.aliyun.com<br></code></pre></td></tr></table></figure><h2 id="3-第三方库的批量导入和导出"><a href="#3-第三方库的批量导入和导出" class="headerlink" title="3. 第三方库的批量导入和导出"></a>3. 第三方库的批量导入和导出</h2><ul><li>导出</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip freeze &gt; [path]\requirements.txt<br></code></pre></td></tr></table></figure><ul><li>导入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><h2 id="4-python-虚拟环境使用"><a href="#4-python-虚拟环境使用" class="headerlink" title="4. python 虚拟环境使用"></a>4. python 虚拟环境使用</h2><ul><li>直接使用默认环境的缺点有：<ul><li>不同项目使用的第三方依赖都装在同一个目录下，不方便管理</li><li>不同项目可能依赖同一个库的不同版本，可能产生冲突</li><li>只能使用一个版本的 <code>python</code> 解释器</li></ul></li><li>使用 <code>venv</code> 模块创建新的 <code>python</code> 虚拟环境<br>这会在当前目录下生成一个名为 <code>.venv_name</code> 的文件夹，这个虚拟环境和外部 <code>python</code> 环境是相互独立、互不影响的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m venv [.venv_name]<br></code></pre></td></tr></table></figure><ul><li>激活虚拟环境<br>推荐使用管理员权限执行以下操作，否则可能激活失败，激活成功后，第三方库会被安装在 <code>.\venv_name\Lib\site-packages\</code> 下。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./venv_name/Scripts/activate <span class="hljs-comment"># linux / Mac OS</span><br>./venv_name/Scripts/activate.bat <span class="hljs-comment"># cmd</span><br>./venv_name/Scripts/activate.ps1 <span class="hljs-comment"># powershell</span><br></code></pre></td></tr></table></figure><ul><li>退出虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deactivate<br></code></pre></td></tr></table></figure><h2 id="5-pycrypto-模块安装"><a href="#5-pycrypto-模块安装" class="headerlink" title="5. pycrypto 模块安装"></a>5. pycrypto 模块安装</h2><ul><li>由于该库已经停止维护，使用 <code>pip</code> 命令通常安装不上该模块，可安装基于 <code>pycrypto</code> 库开发的 <code>pycryptodome</code> 库代替。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pycryptodome<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>若命令 <code>from Crypto.Cipher import AES</code> 报错，可到 <code>python</code> 的包安装目录 <code>site-packages</code> 下将 <code>crypto</code> 文件夹首字母大写为 <code>Crypto</code>。</p>          </div><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1-安装-2"><a href="#1-安装-2" class="headerlink" title="1. 安装"></a>1. 安装</h2><p><a href="https://git-scm.com/download/win">Git 官网</a>下载安装。</p><h2 id="2-配置-3"><a href="#2-配置-3" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>首先将 <code>git</code> 主目录添加到环境变量 <code>path</code> 中，然后设置全局用户名和邮箱，作为 <code>git commit</code> 的发起用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;your github user name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your email account used in github&quot;</span><br></code></pre></td></tr></table></figure><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1-安装-3"><a href="#1-安装-3" class="headerlink" title="1. 安装"></a>1. 安装</h2><p><a href="https://dev.mysql.com/downloads/installer/">MySQL 官网</a>下载免费的社区安装版本，安装时推荐勾选 <code>MySQL WorkBench</code> ，作为数据库的图形化操作界面。</p><h2 id="2-配置-4"><a href="#2-配置-4" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>首次使用需要设置用户名和密码，使用 <code>idea</code> 等软件连接时确保 <code>mysql</code> 服务已经启动。</p><h2 id="3-IDEA-配置-MySQL"><a href="#3-IDEA-配置-MySQL" class="headerlink" title="3. IDEA 配置 MySQL"></a>3. IDEA 配置 MySQL</h2><p>问题：<code>IEDA</code> 中配置 <code>MySQL</code> 出现 <code>Server returns invalid timezone. Go to &#39;Advanced&#39; tab and set &#39;serverTimezone&#39; property manually</code> 报错。</p><p>原因：<code>MySQL</code> 驱动 <code>jar</code> 中的默认时区是 <code>UTC</code>，其代表的是全球标准时间 ，但是我们使用的时间是北京时区-东八区，领先 UTC 八个小时，因为时区不一致，导致了该错误。</p><p>解决方法有以下三个：</p><ul><li>在 <code>Advanced</code> 面板下将 <code>serverTimezone</code> 设置为 <code>Asia/Shanghai</code></li><li>在连接数据库的 <code>url</code> 后面添加参数 <code>?serverTimezone=UTC</code>，设置时区为 <code>UTC</code></li><li>更改 <code>MySQL</code> 的配置文件 <code>my.ini</code> 如下：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">default-time_zone</span> = <span class="hljs-string">&#x27;+8:00&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过ssh与Github建立连接</title>
    <link href="/2021/08/20/Connect-github-using-ssh-keys/"/>
    <url>/2021/08/20/Connect-github-using-ssh-keys/</url>
    
    <content type="html"><![CDATA[<p>使用 <code>ssh</code> 连接 Github，解决命令行执行 <code>git clone</code> 等命令时报错的问题</p><span id="more"></span><h1 id="1-生成本地电脑和-Github-链接的-SSH-公钥"><a href="#1-生成本地电脑和-Github-链接的-SSH-公钥" class="headerlink" title="1. 生成本地电脑和 Github 链接的 SSH 公钥"></a>1. 生成本地电脑和 Github 链接的 SSH 公钥</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;your github user name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your email account used in github&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;your email account used in github&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2-将本地电脑和-GitHub-连接"><a href="#2-将本地电脑和-GitHub-连接" class="headerlink" title="2. 将本地电脑和 GitHub 连接"></a>2. 将本地电脑和 GitHub 连接</h1><p>对于 <code>Windows</code> 系统，公钥保存在 <code>C:\Users\.ssh</code> 的文件夹下，打开 <code>id_rsa.pub</code> 文件，将里面的内容全部复制； 然后去 GitHub 的 Settings，找到 <code>SSH and GPG keys</code> 的页面， 新建一个 SSH Key，将刚才复制的内容粘贴到新建的 SSH Key 中并点击保存。</p><h1 id="3-验证结果"><a href="#3-验证结果" class="headerlink" title="3. 验证结果"></a>3. 验证结果</h1><ul><li>命令行输入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><ul><li>若出现以下提示即连接成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Hi [your username]! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="hljs-string">Connection to github.com closed.</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>若提示 <code>The authenticity of host &#39;github.com (52.74.223.119)&#39; can&#39;t be established</code>，选择 <code>yes</code> 继续连接，此时会在 <code>.ssh</code> 目录下生成 <code>know_hosts</code> 文件，再次检验则成功。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>计科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo框架的博客搭建</title>
    <link href="/2021/08/20/Hexo-Blog/"/>
    <url>/2021/08/20/Hexo-Blog/</url>
    
    <content type="html"><![CDATA[<p>搭建基于<code>hexo</code>框架的个人博客，并配合<code>fluid</code>主题进行博客的个性化设置</p><span id="more"></span><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0. 引言"></a>0. 引言</h2><p>一直都想做一个自己的网站，来记录自己觉得有意义的事情，从零开始手撸 <code>HTML</code> 代码再部署又太麻烦了，自己做出来还不一定好看，所以最后决定用现成的博客框架配合上自己喜欢的主题来做一个博客网站。上网查了一通，发现 <a href="https://github.com/hexojs/hexo">Hexo</a> 这个静态的博客框架比较合适我，配置和部署也都比较简单。查文档搭建完博客之后，个人认为 <code>Hexo</code> 的默认主题不是很好看，就在 <code>Hexo</code> 官方展示的<a href="https://hexo.io/themes/">主题库</a>里选了 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 这个主题来代替。</p><h2 id="1-安装-node-js"><a href="#1-安装-node-js" class="headerlink" title="1. 安装 node.js"></a>1. 安装 node.js</h2><p>到 <a href="https://nodejs.org/zh-cn/">Node 官网</a>下载对应系统的 <code>node.js</code> 安装包安装即可，安装完成后可以将镜像源改为国内的淘宝镜像源，加快包的下载速度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v <span class="hljs-comment"># node 版本，可检测 node 是否安装成功</span><br>npm -v  <span class="hljs-comment"># npm  版本，可检测 npm  是否安装成功</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h2 id="2-安装-HEXO-模块"><a href="#2-安装-HEXO-模块" class="headerlink" title="2. 安装 HEXO 模块"></a>2. 安装 HEXO 模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g <span class="hljs-comment"># 全局安装</span><br>hexo -v <span class="hljs-comment"># hexo 版本，可检测 hexo 是否安装成功</span><br></code></pre></td></tr></table></figure><h2 id="3-初始化博客"><a href="#3-初始化博客" class="headerlink" title="3. 初始化博客"></a>3. 初始化博客</h2><p>创建博客目录<code>user/hexo/blog/</code>，并进入目录初始化博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><h2 id="4-新建博文"><a href="#4-新建博文" class="headerlink" title="4. 新建博文"></a>4. 新建博文</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My Blog&quot;</span><br></code></pre></td></tr></table></figure><p>以上命令​执行完后会在<code>./source/_posts/</code>下生成<code>My-Blog.md</code>文件，回到主目录执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean    <span class="hljs-comment"># 清空之前渲染生成的网站文件</span><br>hexo generate <span class="hljs-comment"># 重新渲染生成新的网站文件</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>新建博文的模板文件在博客目录下的<code>scaffolds</code>文件夹中，可根据需求进行自定义。</p>          </div><h2 id="5-启动博客"><a href="#5-启动博客" class="headerlink" title="5. 启动博客"></a>5. 启动博客</h2><p>博客写完后，可以通过本地服务器预览最终渲染的网页效果，执行以下命令启动本地服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo start<br></code></pre></td></tr></table></figure><p>然后打开浏览器，输入网址 <code>http://localhost:4000/</code> 就可以预览网站内容了。</p><h2 id="6-将博客部署到-GitHub-Page"><a href="#6-将博客部署到-GitHub-Page" class="headerlink" title="6. 将博客部署到 GitHub Page"></a>6. 将博客部署到 GitHub Page</h2><ol><li>转到博客主目录安装一键部署插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ol start="2"><li>更改<code>_config.yml</code>配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config_yml</span><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/[username]/[username].github.io.git</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><ol start="3"><li>一键部署</li></ol><p>首先在<code>Github</code>上创建一个名为<code>[username].github.io</code>的空仓库，<code>[username]</code>必须和自己的<code>Github</code>用户名一致。此外采用<code>hexo-deployer-git</code>插件部署时，建议将仓库设为私有，这样虽然会上传站点文件，但生成的站点文件对外是不可见的；<code>Hexo</code>官方也提供了通过<code>Travis CI</code>来将博客部署到<code>Git Pages</code>上的<a href="https://hexo.io/zh-cn/docs/github-pages">方法</a>，也需要上传站点的源文件，而且是公开的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy <span class="hljs-comment"># 将生成的网站文件发布到 Git Page 上</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>只有<code>Github Pro</code>用户才能在部署<code>Git Pages</code>的仓库私有的同时，通过<code>[username].github.io</code>域名进行访问，但不管是普通用户还是<code>Pro</code>用户，都不建议在<code>Git Pages</code>上发布个人敏感信息。</p>          </div><h2 id="7-版本更新"><a href="#7-版本更新" class="headerlink" title="7. 版本更新"></a>7. 版本更新</h2><p>首先全局更新<code>Hexo</code>的命令行工具<code>hexo-cli</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo version <span class="hljs-comment"># 检查当前 hexo 版本</span><br>npm i hexo-cli -g <span class="hljs-comment"># 全局更新 hexo-cli</span><br>hexo version <span class="hljs-comment"># 检查更新后的 hexo 版本</span><br></code></pre></td></tr></table></figure><p>然后更新全局包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i npm-check -g <span class="hljs-comment"># 检查全局需要升级的包</span><br>npm i npm-upgrade -g <span class="hljs-comment"># 更新 package.json</span><br>npm update -g <span class="hljs-comment"># 更新全局包</span><br></code></pre></td></tr></table></figure><p>最后更新博客目录下的包，转到博客根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm-check <span class="hljs-comment"># 检查当前目录下需要更新的包</span><br>npm-upgrade <span class="hljs-comment"># 更新 package.json</span><br>npm update --save <span class="hljs-comment"># 更新当前目录下的包，并添加依赖</span><br></code></pre></td></tr></table></figure><h2 id="8-个性化主题"><a href="#8-个性化主题" class="headerlink" title="8. 个性化主题"></a>8. 个性化主题</h2><ol><li>clone <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题</a>到博客目录下的主题文件夹中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><ol start="2"><li>在博客配置文件 <code>_config.yml</code> 中配置新的主题</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config_yml</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计科</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
